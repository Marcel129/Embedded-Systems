
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000204  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfd  00000000  00000000  0002de8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219c8  00000000  00000000  00031358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1d1  00000000  00000000  00052d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc745  00000000  00000000  00060ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d636  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d64  00000000  00000000  0012d688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800590c 	.word	0x0800590c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800590c 	.word	0x0800590c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:

robot mRobot;
uint8_t timeToUpdateStates = 0;

int __io_putchar(int ch)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(mRobot.COM_UART_handler, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__io_putchar+0x24>)
 800057e:	69d8      	ldr	r0, [r3, #28]
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	f003 fe8b 	bl	80042a2 <HAL_UART_Transmit>
	return 1;
 800058c:	2301      	movs	r3, #1
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000238 	.word	0x20000238

0800059c <__robot_init>:

void __robot_init(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

	//assign perferials to the struct members
	mRobot.leftWheel->wheelPWMTimer = &htim8;
 80005a0:	4b62      	ldr	r3, [pc, #392]	; (800072c <__robot_init+0x190>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a62      	ldr	r2, [pc, #392]	; (8000730 <__robot_init+0x194>)
 80005a6:	601a      	str	r2, [r3, #0]
	mRobot.leftWheel->wheelPWMChannel = TIM_CHANNEL_1;
 80005a8:	4b60      	ldr	r3, [pc, #384]	; (800072c <__robot_init+0x190>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
	mRobot.leftWheel->dirPort = MOTOR_L_EN_GPIO_Port;
 80005b0:	4b5e      	ldr	r3, [pc, #376]	; (800072c <__robot_init+0x190>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a5f      	ldr	r2, [pc, #380]	; (8000734 <__robot_init+0x198>)
 80005b6:	60da      	str	r2, [r3, #12]
	mRobot.leftWheel->dirPin = MOTOR_L_EN_Pin;
 80005b8:	4b5c      	ldr	r3, [pc, #368]	; (800072c <__robot_init+0x190>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	821a      	strh	r2, [r3, #16]
	mRobot.leftWheel->currentSpeed_forPWM = 0;
 80005c2:	4b5a      	ldr	r3, [pc, #360]	; (800072c <__robot_init+0x190>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	721a      	strb	r2, [r3, #8]
	mRobot.leftWheel->settedSpeed_forPWM = 0;
 80005ca:	4b58      	ldr	r3, [pc, #352]	; (800072c <__robot_init+0x190>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2200      	movs	r2, #0
 80005d0:	725a      	strb	r2, [r3, #9]
	mRobot.leftWheel->wheelMaxSpeed_forPWM = 99;
 80005d2:	4b56      	ldr	r3, [pc, #344]	; (800072c <__robot_init+0x190>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2263      	movs	r2, #99	; 0x63
 80005d8:	729a      	strb	r2, [r3, #10]
	mRobot.leftWheel->wheelMinSpeed_forPWM = -99;
 80005da:	4b54      	ldr	r3, [pc, #336]	; (800072c <__robot_init+0x190>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	229d      	movs	r2, #157	; 0x9d
 80005e0:	72da      	strb	r2, [r3, #11]
	mRobot.leftWheel->name = LEFT_WHEEL;
 80005e2:	4b52      	ldr	r3, [pc, #328]	; (800072c <__robot_init+0x190>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	749a      	strb	r2, [r3, #18]

	mRobot.rightWheel->wheelPWMTimer = &htim8;
 80005ea:	4b50      	ldr	r3, [pc, #320]	; (800072c <__robot_init+0x190>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a50      	ldr	r2, [pc, #320]	; (8000730 <__robot_init+0x194>)
 80005f0:	601a      	str	r2, [r3, #0]
	mRobot.rightWheel->wheelPWMChannel = TIM_CHANNEL_3;
 80005f2:	4b4e      	ldr	r3, [pc, #312]	; (800072c <__robot_init+0x190>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	2208      	movs	r2, #8
 80005f8:	605a      	str	r2, [r3, #4]
	mRobot.rightWheel->dirPort = MOTOR_R_EN_GPIO_Port;
 80005fa:	4b4c      	ldr	r3, [pc, #304]	; (800072c <__robot_init+0x190>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a4d      	ldr	r2, [pc, #308]	; (8000734 <__robot_init+0x198>)
 8000600:	60da      	str	r2, [r3, #12]
	mRobot.rightWheel->dirPin = MOTOR_R_EN_Pin;
 8000602:	4b4a      	ldr	r3, [pc, #296]	; (800072c <__robot_init+0x190>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2240      	movs	r2, #64	; 0x40
 8000608:	821a      	strh	r2, [r3, #16]
	mRobot.rightWheel->currentSpeed_forPWM = 0;
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <__robot_init+0x190>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	721a      	strb	r2, [r3, #8]
	mRobot.rightWheel->settedSpeed_forPWM = 0;
 8000612:	4b46      	ldr	r3, [pc, #280]	; (800072c <__robot_init+0x190>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	725a      	strb	r2, [r3, #9]
	mRobot.rightWheel->wheelMaxSpeed_forPWM = 99;
 800061a:	4b44      	ldr	r3, [pc, #272]	; (800072c <__robot_init+0x190>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	2263      	movs	r2, #99	; 0x63
 8000620:	729a      	strb	r2, [r3, #10]
	mRobot.rightWheel->wheelMinSpeed_forPWM = -99;
 8000622:	4b42      	ldr	r3, [pc, #264]	; (800072c <__robot_init+0x190>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	229d      	movs	r2, #157	; 0x9d
 8000628:	72da      	strb	r2, [r3, #11]
	mRobot.rightWheel->name = RIGHT_WHEEL;
 800062a:	4b40      	ldr	r3, [pc, #256]	; (800072c <__robot_init+0x190>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	749a      	strb	r2, [r3, #18]

	mRobot.acceleration_forPWM = 1;
 8000632:	4b3e      	ldr	r3, [pc, #248]	; (800072c <__robot_init+0x190>)
 8000634:	2201      	movs	r2, #1
 8000636:	741a      	strb	r2, [r3, #16]
	mRobot.mDir = STOP;
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <__robot_init+0x190>)
 800063a:	2204      	movs	r2, #4
 800063c:	745a      	strb	r2, [r3, #17]

	HAL_GPIO_WritePin(mRobot.leftWheel->dirPort, mRobot.leftWheel->dirPin, GPIO_PIN_RESET);
 800063e:	4b3b      	ldr	r3, [pc, #236]	; (800072c <__robot_init+0x190>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68d8      	ldr	r0, [r3, #12]
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <__robot_init+0x190>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	8a1b      	ldrh	r3, [r3, #16]
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	f001 ffb1 	bl	80025b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mRobot.rightWheel->dirPort, mRobot.rightWheel->dirPin, GPIO_PIN_RESET);
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <__robot_init+0x190>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	68d8      	ldr	r0, [r3, #12]
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <__robot_init+0x190>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	8a1b      	ldrh	r3, [r3, #16]
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	f001 ffa7 	bl	80025b4 <HAL_GPIO_WritePin>

	//start PWM
	HAL_TIM_PWM_Start(mRobot.leftWheel->wheelPWMTimer,  mRobot.leftWheel->wheelPWMChannel);
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <__robot_init+0x190>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <__robot_init+0x190>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	4610      	mov	r0, r2
 8000676:	f002 fdf7 	bl	8003268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.rightWheel->wheelPWMTimer,  mRobot.rightWheel->wheelPWMChannel);
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <__robot_init+0x190>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <__robot_init+0x190>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	4610      	mov	r0, r2
 800068a:	f002 fded 	bl	8003268 <HAL_TIM_PWM_Start>

	//reset speeds
	__HAL_TIM_SET_COMPARE(mRobot.leftWheel->wheelPWMTimer, mRobot.leftWheel->wheelPWMChannel, 0);
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <__robot_init+0x190>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <__robot_init+0x10a>
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <__robot_init+0x190>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	; 0x34
 80006a4:	e01d      	b.n	80006e2 <__robot_init+0x146>
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <__robot_init+0x190>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d106      	bne.n	80006be <__robot_init+0x122>
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <__robot_init+0x190>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	6393      	str	r3, [r2, #56]	; 0x38
 80006bc:	e011      	b.n	80006e2 <__robot_init+0x146>
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <__robot_init+0x190>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d106      	bne.n	80006d6 <__robot_init+0x13a>
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <__robot_init+0x190>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006d4:	e005      	b.n	80006e2 <__robot_init+0x146>
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <__robot_init+0x190>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.rightWheel->wheelPWMTimer, mRobot.rightWheel->wheelPWMChannel, 0);
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <__robot_init+0x190>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d106      	bne.n	80006fa <__robot_init+0x15e>
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <__robot_init+0x190>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
 80006f8:	e024      	b.n	8000744 <__robot_init+0x1a8>
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__robot_init+0x190>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b04      	cmp	r3, #4
 8000702:	d106      	bne.n	8000712 <__robot_init+0x176>
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <__robot_init+0x190>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	6393      	str	r3, [r2, #56]	; 0x38
 8000710:	e018      	b.n	8000744 <__robot_init+0x1a8>
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <__robot_init+0x190>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b08      	cmp	r3, #8
 800071a:	d10d      	bne.n	8000738 <__robot_init+0x19c>
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <__robot_init+0x190>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000728:	e00c      	b.n	8000744 <__robot_init+0x1a8>
 800072a:	bf00      	nop
 800072c:	20000238 	.word	0x20000238
 8000730:	200001ac 	.word	0x200001ac
 8000734:	40020800 	.word	0x40020800
 8000738:	4b71      	ldr	r3, [pc, #452]	; (8000900 <__robot_init+0x364>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	6413      	str	r3, [r2, #64]	; 0x40

	//assign perferials to the struct members
	mRobot.mLED->R_timer = &htim2;
 8000744:	4b6e      	ldr	r3, [pc, #440]	; (8000900 <__robot_init+0x364>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	4a6e      	ldr	r2, [pc, #440]	; (8000904 <__robot_init+0x368>)
 800074a:	601a      	str	r2, [r3, #0]
	mRobot.mLED->G_timer = &htim2;
 800074c:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <__robot_init+0x364>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4a6c      	ldr	r2, [pc, #432]	; (8000904 <__robot_init+0x368>)
 8000752:	605a      	str	r2, [r3, #4]
	mRobot.mLED->B_timer = &htim2;
 8000754:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <__robot_init+0x364>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	4a6a      	ldr	r2, [pc, #424]	; (8000904 <__robot_init+0x368>)
 800075a:	609a      	str	r2, [r3, #8]
	mRobot.mLED->R_channel = TIM_CHANNEL_2;
 800075c:	4b68      	ldr	r3, [pc, #416]	; (8000900 <__robot_init+0x364>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	2204      	movs	r2, #4
 8000762:	60da      	str	r2, [r3, #12]
	mRobot.mLED->G_channel = TIM_CHANNEL_3;
 8000764:	4b66      	ldr	r3, [pc, #408]	; (8000900 <__robot_init+0x364>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	2208      	movs	r2, #8
 800076a:	611a      	str	r2, [r3, #16]
	mRobot.mLED->B_channel = TIM_CHANNEL_4;
 800076c:	4b64      	ldr	r3, [pc, #400]	; (8000900 <__robot_init+0x364>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	220c      	movs	r2, #12
 8000772:	615a      	str	r2, [r3, #20]

	mRobot.mLED->currentBrightness_R = 0;
 8000774:	4b62      	ldr	r3, [pc, #392]	; (8000900 <__robot_init+0x364>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
	mRobot.mLED->currentBrightness_G = 0;
 800077c:	4b60      	ldr	r3, [pc, #384]	; (8000900 <__robot_init+0x364>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	2200      	movs	r2, #0
 8000782:	769a      	strb	r2, [r3, #26]
	mRobot.mLED->currentBrightness_B = 0;
 8000784:	4b5e      	ldr	r3, [pc, #376]	; (8000900 <__robot_init+0x364>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	2200      	movs	r2, #0
 800078a:	771a      	strb	r2, [r3, #28]
	mRobot.mLED->settetBrightness_R = 0;
 800078c:	4b5c      	ldr	r3, [pc, #368]	; (8000900 <__robot_init+0x364>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	2200      	movs	r2, #0
 8000792:	765a      	strb	r2, [r3, #25]
	mRobot.mLED->settetBrightness_G = 0;
 8000794:	4b5a      	ldr	r3, [pc, #360]	; (8000900 <__robot_init+0x364>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
	mRobot.mLED->settetBrightness_B = 0;
 800079c:	4b58      	ldr	r3, [pc, #352]	; (8000900 <__robot_init+0x364>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	2200      	movs	r2, #0
 80007a2:	775a      	strb	r2, [r3, #29]
	mRobot.mLED->brightnessChangeStep_R = 1;
 80007a4:	4b56      	ldr	r3, [pc, #344]	; (8000900 <__robot_init+0x364>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	2201      	movs	r2, #1
 80007aa:	779a      	strb	r2, [r3, #30]
	mRobot.mLED->brightnessChangeStep_G = 1;
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <__robot_init+0x364>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2201      	movs	r2, #1
 80007b2:	77da      	strb	r2, [r3, #31]
	mRobot.mLED->brightnessChangeStep_B = 1;
 80007b4:	4b52      	ldr	r3, [pc, #328]	; (8000900 <__robot_init+0x364>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2201      	movs	r2, #1
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]

	mRobot.mLED->ledMaxBrightness = 99;
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <__robot_init+0x364>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	2263      	movs	r2, #99	; 0x63
 80007c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	mRobot.mLED->ledMinBrightness = 0;
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <__robot_init+0x364>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	//start timers
	HAL_TIM_PWM_Start(mRobot.mLED->R_timer,  mRobot.mLED->R_channel);
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <__robot_init+0x364>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b49      	ldr	r3, [pc, #292]	; (8000900 <__robot_init+0x364>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4619      	mov	r1, r3
 80007e0:	4610      	mov	r0, r2
 80007e2:	f002 fd41 	bl	8003268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.mLED->G_timer,  mRobot.mLED->G_channel);
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <__robot_init+0x364>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	4b44      	ldr	r3, [pc, #272]	; (8000900 <__robot_init+0x364>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4610      	mov	r0, r2
 80007f6:	f002 fd37 	bl	8003268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.mLED->B_timer,  mRobot.mLED->B_channel);
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <__robot_init+0x364>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <__robot_init+0x364>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4619      	mov	r1, r3
 8000808:	4610      	mov	r0, r2
 800080a:	f002 fd2d 	bl	8003268 <HAL_TIM_PWM_Start>

	//reset brightness
	__HAL_TIM_SET_COMPARE(mRobot.mLED->R_timer, mRobot.mLED->R_channel, 0);
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <__robot_init+0x364>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d106      	bne.n	8000826 <__robot_init+0x28a>
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <__robot_init+0x364>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e01d      	b.n	8000862 <__robot_init+0x2c6>
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <__robot_init+0x364>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	2b04      	cmp	r3, #4
 800082e:	d106      	bne.n	800083e <__robot_init+0x2a2>
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <__robot_init+0x364>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	6393      	str	r3, [r2, #56]	; 0x38
 800083c:	e011      	b.n	8000862 <__robot_init+0x2c6>
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <__robot_init+0x364>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	2b08      	cmp	r3, #8
 8000846:	d106      	bne.n	8000856 <__robot_init+0x2ba>
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <__robot_init+0x364>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000854:	e005      	b.n	8000862 <__robot_init+0x2c6>
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <__robot_init+0x364>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->G_timer, mRobot.mLED->G_channel, 0);
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <__robot_init+0x364>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d106      	bne.n	800087a <__robot_init+0x2de>
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <__robot_init+0x364>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
 8000878:	e01d      	b.n	80008b6 <__robot_init+0x31a>
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <__robot_init+0x364>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d106      	bne.n	8000892 <__robot_init+0x2f6>
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <__robot_init+0x364>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	6393      	str	r3, [r2, #56]	; 0x38
 8000890:	e011      	b.n	80008b6 <__robot_init+0x31a>
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <__robot_init+0x364>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	2b08      	cmp	r3, #8
 800089a:	d106      	bne.n	80008aa <__robot_init+0x30e>
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <__robot_init+0x364>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2300      	movs	r3, #0
 80008a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008a8:	e005      	b.n	80008b6 <__robot_init+0x31a>
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <__robot_init+0x364>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	2300      	movs	r3, #0
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, 0);
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <__robot_init+0x364>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d106      	bne.n	80008ce <__robot_init+0x332>
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <__robot_init+0x364>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
 80008cc:	e022      	b.n	8000914 <__robot_init+0x378>
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <__robot_init+0x364>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d106      	bne.n	80008e6 <__robot_init+0x34a>
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <__robot_init+0x364>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
 80008e4:	e016      	b.n	8000914 <__robot_init+0x378>
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <__robot_init+0x364>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d10b      	bne.n	8000908 <__robot_init+0x36c>
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <__robot_init+0x364>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008fc:	e00a      	b.n	8000914 <__robot_init+0x378>
 80008fe:	bf00      	nop
 8000900:	20000238 	.word	0x20000238
 8000904:	200000d4 	.word	0x200000d4
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <__robot_init+0x418>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	6413      	str	r3, [r2, #64]	; 0x40

	//assign perferials to the struct members
	mRobot.mSonar->echoPort = SONAR_ECHO_GPIO_Port;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <__robot_init+0x418>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <__robot_init+0x41c>)
 800091a:	611a      	str	r2, [r3, #16]
	mRobot.mSonar->enablePort = SONAR_ENABLE_GPIO_Port;
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <__robot_init+0x418>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <__robot_init+0x41c>)
 8000922:	615a      	str	r2, [r3, #20]
	mRobot.mSonar->triggerPort = SONAR_TRIGGER_GPIO_Port;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <__robot_init+0x418>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a24      	ldr	r2, [pc, #144]	; (80009bc <__robot_init+0x420>)
 800092a:	60da      	str	r2, [r3, #12]
	mRobot.mSonar->echoPin = SONAR_ECHO_Pin;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <__robot_init+0x418>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2220      	movs	r2, #32
 8000932:	835a      	strh	r2, [r3, #26]
	mRobot.mSonar->enablePin = SONAR_ENABLE_Pin;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <__robot_init+0x418>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093c:	839a      	strh	r2, [r3, #28]
	mRobot.mSonar->triggerPin = SONAR_TRIGGER_Pin;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <__robot_init+0x418>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(mRobot.mSonar->enablePort, mRobot.mSonar->enablePin, GPIO_PIN_SET);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <__robot_init+0x418>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	6958      	ldr	r0, [r3, #20]
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <__robot_init+0x418>)
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	8b9b      	ldrh	r3, [r3, #28]
 8000954:	2201      	movs	r2, #1
 8000956:	4619      	mov	r1, r3
 8000958:	f001 fe2c 	bl	80025b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mRobot.mSonar->triggerPort, mRobot.mSonar->triggerPin, GPIO_PIN_RESET);
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <__robot_init+0x418>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	68d8      	ldr	r0, [r3, #12]
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <__robot_init+0x418>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	8b1b      	ldrh	r3, [r3, #24]
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	f001 fe22 	bl	80025b4 <HAL_GPIO_WritePin>

	mRobot.mSonar->currentResult_us = 0;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <__robot_init+0x418>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
	mRobot.mSonar->prevTime_us = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <__robot_init+0x418>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
	mRobot.mSonar->isMeasureReady = 0;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__robot_init+0x418>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	2200      	movs	r2, #0
 8000986:	721a      	strb	r2, [r3, #8]

	//assign uart handler for communication with PC
	mRobot.COM_UART_handler = &huart5;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <__robot_init+0x418>)
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <__robot_init+0x424>)
 800098c:	61da      	str	r2, [r3, #28]

	//assign and start the interrupt timer
	//this timer is used to generate interrupt for periodicly update state of the robot
	mRobot.IRQ_timer = &htim7;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <__robot_init+0x418>)
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <__robot_init+0x428>)
 8000992:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(mRobot.IRQ_timer);
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <__robot_init+0x418>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fb4d 	bl	8003038 <HAL_TIM_Base_Start_IT>

	//assign and start the time base timer
	//this timer is required to precisely measure the proximity using sonar
	mRobot.timeBaseTimer_1us = &htim5;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <__robot_init+0x418>)
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <__robot_init+0x42c>)
 80009a2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(mRobot.timeBaseTimer_1us);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <__robot_init+0x418>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fadd 	bl	8002f68 <HAL_TIM_Base_Start>

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000238 	.word	0x20000238
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020400 	.word	0x40020400
 80009c0:	200001f4 	.word	0x200001f4
 80009c4:	20000164 	.word	0x20000164
 80009c8:	2000011c 	.word	0x2000011c

080009cc <__robot_update_wheel_speed>:

void __robot_update_wheel_speed(robotWheel *wheel){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(mRobot.mDir == STOP){
 80009d4:	4b68      	ldr	r3, [pc, #416]	; (8000b78 <__robot_update_wheel_speed+0x1ac>)
 80009d6:	7c5b      	ldrb	r3, [r3, #17]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d102      	bne.n	80009e2 <__robot_update_wheel_speed+0x16>
		wheel->settedSpeed_forPWM = 0;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	725a      	strb	r2, [r3, #9]
	}

	if(wheel->currentSpeed_forPWM > wheel->settedSpeed_forPWM){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dd20      	ble.n	8000a34 <__robot_update_wheel_speed+0x68>
		if(wheel->currentSpeed_forPWM - mRobot.acceleration_forPWM < wheel->wheelMinSpeed_forPWM){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <__robot_update_wheel_speed+0x1ac>)
 80009fc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	f992 200b 	ldrsb.w	r2, [r2, #11]
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	da05      	bge.n	8000a18 <__robot_update_wheel_speed+0x4c>
			wheel->currentSpeed_forPWM = wheel->wheelMinSpeed_forPWM;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f993 200b 	ldrsb.w	r2, [r3, #11]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	721a      	strb	r2, [r3, #8]
 8000a16:	e035      	b.n	8000a84 <__robot_update_wheel_speed+0xb8>
		}
		else{
			wheel->currentSpeed_forPWM -= mRobot.acceleration_forPWM;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b55      	ldr	r3, [pc, #340]	; (8000b78 <__robot_update_wheel_speed+0x1ac>)
 8000a22:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	721a      	strb	r2, [r3, #8]
 8000a32:	e027      	b.n	8000a84 <__robot_update_wheel_speed+0xb8>
		}
	}
	else if(wheel->currentSpeed_forPWM < wheel->settedSpeed_forPWM){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	da1f      	bge.n	8000a84 <__robot_update_wheel_speed+0xb8>
		if(wheel->currentSpeed_forPWM + mRobot.acceleration_forPWM > wheel->wheelMaxSpeed_forPWM){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <__robot_update_wheel_speed+0x1ac>)
 8000a4e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000a52:	4413      	add	r3, r2
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	dd05      	ble.n	8000a6a <__robot_update_wheel_speed+0x9e>
			wheel->currentSpeed_forPWM = wheel->wheelMaxSpeed_forPWM;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f993 200a 	ldrsb.w	r2, [r3, #10]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	721a      	strb	r2, [r3, #8]
 8000a68:	e00c      	b.n	8000a84 <__robot_update_wheel_speed+0xb8>
		}
		else{
			wheel->currentSpeed_forPWM += mRobot.acceleration_forPWM;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <__robot_update_wheel_speed+0x1ac>)
 8000a74:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	b25a      	sxtb	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	721a      	strb	r2, [r3, #8]
		}
	}

	if(wheel->currentSpeed_forPWM <= 0){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dc19      	bgt.n	8000ac2 <__robot_update_wheel_speed+0xf6>
		if(wheel->name == LEFT_WHEEL){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7c9b      	ldrb	r3, [r3, #18]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d108      	bne.n	8000aa8 <__robot_update_wheel_speed+0xdc>
			HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_SET);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68d8      	ldr	r0, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	8a1b      	ldrh	r3, [r3, #16]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f001 fd87 	bl	80025b4 <HAL_GPIO_WritePin>

		}

		__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
	}
}
 8000aa6:	e063      	b.n	8000b70 <__robot_update_wheel_speed+0x1a4>
		else if(wheel->name == RIGHT_WHEEL){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7c9b      	ldrb	r3, [r3, #18]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d15f      	bne.n	8000b70 <__robot_update_wheel_speed+0x1a4>
			HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_RESET);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68d8      	ldr	r0, [r3, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	8a1b      	ldrh	r3, [r3, #16]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	f001 fd7a 	bl	80025b4 <HAL_GPIO_WritePin>
}
 8000ac0:	e056      	b.n	8000b70 <__robot_update_wheel_speed+0x1a4>
		if(wheel->name == LEFT_WHEEL){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7c9b      	ldrb	r3, [r3, #18]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d108      	bne.n	8000adc <__robot_update_wheel_speed+0x110>
			HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_RESET);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68d8      	ldr	r0, [r3, #12]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8a1b      	ldrh	r3, [r3, #16]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 fd6d 	bl	80025b4 <HAL_GPIO_WritePin>
 8000ada:	e00b      	b.n	8000af4 <__robot_update_wheel_speed+0x128>
		else if(wheel->name == RIGHT_WHEEL){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7c9b      	ldrb	r3, [r3, #18]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d107      	bne.n	8000af4 <__robot_update_wheel_speed+0x128>
			HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_SET);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68d8      	ldr	r0, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	8a1b      	ldrh	r3, [r3, #16]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	f001 fd60 	bl	80025b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10b      	bne.n	8000b14 <__robot_update_wheel_speed+0x148>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b12:	e02d      	b.n	8000b70 <__robot_update_wheel_speed+0x1a4>
		__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d10c      	bne.n	8000b36 <__robot_update_wheel_speed+0x16a>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	b2d9      	uxtb	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	460b      	mov	r3, r1
 8000b32:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b34:	e01c      	b.n	8000b70 <__robot_update_wheel_speed+0x1a4>
		__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d10c      	bne.n	8000b58 <__robot_update_wheel_speed+0x18c>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bfb8      	it	lt
 8000b48:	425b      	neglt	r3, r3
 8000b4a:	b2d9      	uxtb	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	460b      	mov	r3, r1
 8000b54:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b56:	e00b      	b.n	8000b70 <__robot_update_wheel_speed+0x1a4>
		__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	b2d9      	uxtb	r1, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000238 	.word	0x20000238

08000b7c <__robot_update_led_light>:

void __robot_update_led_light(){
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

	//update brightness vaules in the structure
	if(mRobot.mLED->currentBrightness_R > mRobot.mLED->settetBrightness_R ){
 8000b80:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <__robot_update_led_light+0x238>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	7e1a      	ldrb	r2, [r3, #24]
 8000b86:	4b8b      	ldr	r3, [pc, #556]	; (8000db4 <__robot_update_led_light+0x238>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	7e5b      	ldrb	r3, [r3, #25]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d921      	bls.n	8000bd4 <__robot_update_led_light+0x58>
		//check boundary conditions
		if(mRobot.mLED->currentBrightness_R - mRobot.mLED->brightnessChangeStep_R < mRobot.mLED->ledMinBrightness){
 8000b90:	4b88      	ldr	r3, [pc, #544]	; (8000db4 <__robot_update_led_light+0x238>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	7e1b      	ldrb	r3, [r3, #24]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b86      	ldr	r3, [pc, #536]	; (8000db4 <__robot_update_led_light+0x238>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	7f9b      	ldrb	r3, [r3, #30]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	4a84      	ldr	r2, [pc, #528]	; (8000db4 <__robot_update_led_light+0x238>)
 8000ba2:	6892      	ldr	r2, [r2, #8]
 8000ba4:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	da07      	bge.n	8000bbc <__robot_update_led_light+0x40>
			mRobot.mLED->currentBrightness_R = mRobot.mLED->ledMinBrightness;
 8000bac:	4b81      	ldr	r3, [pc, #516]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	4b80      	ldr	r3, [pc, #512]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000bb8:	761a      	strb	r2, [r3, #24]
 8000bba:	e034      	b.n	8000c26 <__robot_update_led_light+0xaa>
		}
		else{
			mRobot.mLED->currentBrightness_R -= mRobot.mLED->brightnessChangeStep_R;
 8000bbc:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	7e19      	ldrb	r1, [r3, #24]
 8000bc2:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	7f9a      	ldrb	r2, [r3, #30]
 8000bc8:	4b7a      	ldr	r3, [pc, #488]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	761a      	strb	r2, [r3, #24]
 8000bd2:	e028      	b.n	8000c26 <__robot_update_led_light+0xaa>
		}
	}
	else if(mRobot.mLED->currentBrightness_R < mRobot.mLED->settetBrightness_R){
 8000bd4:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	7e1a      	ldrb	r2, [r3, #24]
 8000bda:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	7e5b      	ldrb	r3, [r3, #25]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d220      	bcs.n	8000c26 <__robot_update_led_light+0xaa>
		if(mRobot.mLED->currentBrightness_R + mRobot.mLED->brightnessChangeStep_R > mRobot.mLED->ledMaxBrightness){
 8000be4:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <__robot_update_led_light+0x238>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	7e1b      	ldrb	r3, [r3, #24]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	7f9b      	ldrb	r3, [r3, #30]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a6f      	ldr	r2, [pc, #444]	; (8000db4 <__robot_update_led_light+0x238>)
 8000bf6:	6892      	ldr	r2, [r2, #8]
 8000bf8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	dd07      	ble.n	8000c10 <__robot_update_led_light+0x94>
			mRobot.mLED->currentBrightness_R = mRobot.mLED->ledMaxBrightness;
 8000c00:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	4b6b      	ldr	r3, [pc, #428]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000c0c:	761a      	strb	r2, [r3, #24]
 8000c0e:	e00a      	b.n	8000c26 <__robot_update_led_light+0xaa>
		}
		else{
			mRobot.mLED->currentBrightness_R += mRobot.mLED->brightnessChangeStep_R;
 8000c10:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	7e19      	ldrb	r1, [r3, #24]
 8000c16:	4b67      	ldr	r3, [pc, #412]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	7f9a      	ldrb	r2, [r3, #30]
 8000c1c:	4b65      	ldr	r3, [pc, #404]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	440a      	add	r2, r1
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	761a      	strb	r2, [r3, #24]
		}
	}


	if(mRobot.mLED->currentBrightness_G > mRobot.mLED->settetBrightness_G ){
 8000c26:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	7e9a      	ldrb	r2, [r3, #26]
 8000c2c:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	7edb      	ldrb	r3, [r3, #27]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d921      	bls.n	8000c7a <__robot_update_led_light+0xfe>
		if(mRobot.mLED->currentBrightness_G - mRobot.mLED->brightnessChangeStep_G < mRobot.mLED->ledMinBrightness){
 8000c36:	4b5f      	ldr	r3, [pc, #380]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	7e9b      	ldrb	r3, [r3, #26]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	7fdb      	ldrb	r3, [r3, #31]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	4a5b      	ldr	r2, [pc, #364]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c48:	6892      	ldr	r2, [r2, #8]
 8000c4a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	da07      	bge.n	8000c62 <__robot_update_led_light+0xe6>
			mRobot.mLED->currentBrightness_G = mRobot.mLED->ledMinBrightness;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	4b57      	ldr	r3, [pc, #348]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000c5e:	769a      	strb	r2, [r3, #26]
 8000c60:	e034      	b.n	8000ccc <__robot_update_led_light+0x150>
		}
		else{
			mRobot.mLED->currentBrightness_G -= mRobot.mLED->brightnessChangeStep_G;
 8000c62:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	7e99      	ldrb	r1, [r3, #26]
 8000c68:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	7fda      	ldrb	r2, [r3, #31]
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	1a8a      	subs	r2, r1, r2
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	769a      	strb	r2, [r3, #26]
 8000c78:	e028      	b.n	8000ccc <__robot_update_led_light+0x150>
		}
	}
	else if(mRobot.mLED->currentBrightness_G < mRobot.mLED->settetBrightness_G){
 8000c7a:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	7e9a      	ldrb	r2, [r3, #26]
 8000c80:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	7edb      	ldrb	r3, [r3, #27]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d220      	bcs.n	8000ccc <__robot_update_led_light+0x150>
		if(mRobot.mLED->currentBrightness_G + mRobot.mLED->brightnessChangeStep_G > mRobot.mLED->ledMaxBrightness){
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b48      	ldr	r3, [pc, #288]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	7fdb      	ldrb	r3, [r3, #31]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <__robot_update_led_light+0x238>)
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	dd07      	ble.n	8000cb6 <__robot_update_led_light+0x13a>
			mRobot.mLED->currentBrightness_G = mRobot.mLED->ledMaxBrightness;
 8000ca6:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <__robot_update_led_light+0x238>)
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000cb2:	769a      	strb	r2, [r3, #26]
 8000cb4:	e00a      	b.n	8000ccc <__robot_update_led_light+0x150>
		}
		else{
			mRobot.mLED->currentBrightness_G += mRobot.mLED->brightnessChangeStep_G;
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	7e99      	ldrb	r1, [r3, #26]
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	7fda      	ldrb	r2, [r3, #31]
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	440a      	add	r2, r1
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	769a      	strb	r2, [r3, #26]
		}
	}


	if(mRobot.mLED->currentBrightness_B > mRobot.mLED->settetBrightness_B ){
 8000ccc:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	7f1a      	ldrb	r2, [r3, #28]
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	7f5b      	ldrb	r3, [r3, #29]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d923      	bls.n	8000d24 <__robot_update_led_light+0x1a8>
		if(mRobot.mLED->currentBrightness_B - mRobot.mLED->brightnessChangeStep_B < mRobot.mLED->ledMinBrightness){
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	7f1b      	ldrb	r3, [r3, #28]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <__robot_update_led_light+0x238>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cf0:	6892      	ldr	r2, [r2, #8]
 8000cf2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	da07      	bge.n	8000d0a <__robot_update_led_light+0x18e>
			mRobot.mLED->currentBrightness_B = mRobot.mLED->ledMinBrightness;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <__robot_update_led_light+0x238>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000d06:	771a      	strb	r2, [r3, #28]
 8000d08:	e037      	b.n	8000d7a <__robot_update_led_light+0x1fe>
		}
		else{
			mRobot.mLED->currentBrightness_B -= mRobot.mLED->brightnessChangeStep_B;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	7f19      	ldrb	r1, [r3, #28]
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	771a      	strb	r2, [r3, #28]
 8000d22:	e02a      	b.n	8000d7a <__robot_update_led_light+0x1fe>
		}
	}
	else if(mRobot.mLED->currentBrightness_B < mRobot.mLED->settetBrightness_B){
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	7f1a      	ldrb	r2, [r3, #28]
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	7f5b      	ldrb	r3, [r3, #29]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d222      	bcs.n	8000d7a <__robot_update_led_light+0x1fe>
		if(mRobot.mLED->currentBrightness_B + mRobot.mLED->brightnessChangeStep_B > mRobot.mLED->ledMaxBrightness){
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	7f1b      	ldrb	r3, [r3, #28]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d48:	6892      	ldr	r2, [r2, #8]
 8000d4a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	dd07      	ble.n	8000d62 <__robot_update_led_light+0x1e6>
			mRobot.mLED->currentBrightness_B = mRobot.mLED->ledMaxBrightness;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000d5e:	771a      	strb	r2, [r3, #28]
 8000d60:	e00b      	b.n	8000d7a <__robot_update_led_light+0x1fe>
		}
		else{
			mRobot.mLED->currentBrightness_B += mRobot.mLED->brightnessChangeStep_B;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	7f19      	ldrb	r1, [r3, #28]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	440a      	add	r2, r1
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	771a      	strb	r2, [r3, #28]
		}
	}

	//assign updated values to the timer
	__HAL_TIM_SET_COMPARE(mRobot.mLED->R_timer, mRobot.mLED->R_channel, mRobot.mLED->currentBrightness_R);
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d108      	bne.n	8000d96 <__robot_update_led_light+0x21a>
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	7e1a      	ldrb	r2, [r3, #24]
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
 8000d94:	e028      	b.n	8000de8 <__robot_update_led_light+0x26c>
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <__robot_update_led_light+0x238>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d10b      	bne.n	8000db8 <__robot_update_led_light+0x23c>
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__robot_update_led_light+0x238>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	7e19      	ldrb	r1, [r3, #24]
 8000da6:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <__robot_update_led_light+0x238>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	460b      	mov	r3, r1
 8000db0:	6393      	str	r3, [r2, #56]	; 0x38
 8000db2:	e019      	b.n	8000de8 <__robot_update_led_light+0x26c>
 8000db4:	20000238 	.word	0x20000238
 8000db8:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d109      	bne.n	8000dd6 <__robot_update_led_light+0x25a>
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	7e19      	ldrb	r1, [r3, #24]
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dd4:	e008      	b.n	8000de8 <__robot_update_led_light+0x26c>
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	7e19      	ldrb	r1, [r3, #24]
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	460b      	mov	r3, r1
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->G_timer, mRobot.mLED->G_channel, mRobot.mLED->currentBrightness_G);
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d108      	bne.n	8000e04 <__robot_update_led_light+0x288>
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	7e9a      	ldrb	r2, [r3, #26]
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
 8000e02:	e026      	b.n	8000e52 <__robot_update_led_light+0x2d6>
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d109      	bne.n	8000e22 <__robot_update_led_light+0x2a6>
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	7e99      	ldrb	r1, [r3, #26]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	6393      	str	r3, [r2, #56]	; 0x38
 8000e20:	e017      	b.n	8000e52 <__robot_update_led_light+0x2d6>
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d109      	bne.n	8000e40 <__robot_update_led_light+0x2c4>
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	7e99      	ldrb	r1, [r3, #26]
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e3e:	e008      	b.n	8000e52 <__robot_update_led_light+0x2d6>
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	7e99      	ldrb	r1, [r3, #26]
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d108      	bne.n	8000e6e <__robot_update_led_light+0x2f2>
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	7f1a      	ldrb	r2, [r3, #28]
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e6c:	e026      	b.n	8000ebc <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d109      	bne.n	8000e8c <__robot_update_led_light+0x310>
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	7f19      	ldrb	r1, [r3, #28]
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	460b      	mov	r3, r1
 8000e88:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e8a:	e017      	b.n	8000ebc <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d109      	bne.n	8000eaa <__robot_update_led_light+0x32e>
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	7f19      	ldrb	r1, [r3, #28]
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ea8:	e008      	b.n	8000ebc <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	7f19      	ldrb	r1, [r3, #28]
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <__robot_update_led_light+0x34c>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000238 	.word	0x20000238

08000ecc <__robot_Move>:

void __robot_Move(moveDir md, int8_t L_power, int8_t R_power){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]

	switch(md){
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d83d      	bhi.n	8000f60 <__robot_Move+0x94>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <__robot_Move+0x20>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f01 	.word	0x08000f01
 8000ef0:	08000f09 	.word	0x08000f09
 8000ef4:	08000f11 	.word	0x08000f11
 8000ef8:	08000f19 	.word	0x08000f19
 8000efc:	08000f21 	.word	0x08000f21
	case FORWARD:
		mRobot.mDir = FORWARD;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <__robot_Move+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	745a      	strb	r2, [r3, #17]
		break;
 8000f06:	e02b      	b.n	8000f60 <__robot_Move+0x94>
	case BACWARD:
		mRobot.mDir = BACWARD;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <__robot_Move+0xac>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	745a      	strb	r2, [r3, #17]
		break;
 8000f0e:	e027      	b.n	8000f60 <__robot_Move+0x94>
	case LEFT:
		mRobot.mDir = LEFT;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <__robot_Move+0xac>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	745a      	strb	r2, [r3, #17]
		break;
 8000f16:	e023      	b.n	8000f60 <__robot_Move+0x94>
	case RIGHT:
		mRobot.mDir = RIGHT;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <__robot_Move+0xac>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	745a      	strb	r2, [r3, #17]
		break;
 8000f1e:	e01f      	b.n	8000f60 <__robot_Move+0x94>
	case STOP:
		mRobot.mDir = STOP;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <__robot_Move+0xac>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	745a      	strb	r2, [r3, #17]
		HAL_GPIO_WritePin(mRobot.leftWheel->dirPort, mRobot.leftWheel->dirPin, GPIO_PIN_RESET);
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <__robot_Move+0xac>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68d8      	ldr	r0, [r3, #12]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <__robot_Move+0xac>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	8a1b      	ldrh	r3, [r3, #16]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	f001 fb3d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mRobot.rightWheel->dirPort, mRobot.rightWheel->dirPin, GPIO_PIN_RESET);
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <__robot_Move+0xac>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	68d8      	ldr	r0, [r3, #12]
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <__robot_Move+0xac>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	8a1b      	ldrh	r3, [r3, #16]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f001 fb33 	bl	80025b4 <HAL_GPIO_WritePin>
		mRobot.leftWheel->settedSpeed_forPWM = 0;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <__robot_Move+0xac>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	725a      	strb	r2, [r3, #9]
		mRobot.rightWheel->settedSpeed_forPWM = 0;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <__robot_Move+0xac>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	725a      	strb	r2, [r3, #9]
		return;
 8000f5e:	e007      	b.n	8000f70 <__robot_Move+0xa4>
	}

	mRobot.leftWheel->settedSpeed_forPWM = L_power;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <__robot_Move+0xac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	79ba      	ldrb	r2, [r7, #6]
 8000f66:	725a      	strb	r2, [r3, #9]
	mRobot.rightWheel->settedSpeed_forPWM = R_power;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <__robot_Move+0xac>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	797a      	ldrb	r2, [r7, #5]
 8000f6e:	725a      	strb	r2, [r3, #9]
}
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000238 	.word	0x20000238

08000f7c <__robot_set_led_light>:

void __robot_set_led_light(uint8_t R, uint8_t G, uint8_t B){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	460b      	mov	r3, r1
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	717b      	strb	r3, [r7, #5]
	mRobot.mLED->settetBrightness_R = R;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <__robot_set_led_light+0x38>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	765a      	strb	r2, [r3, #25]
	mRobot.mLED->settetBrightness_G = G;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <__robot_set_led_light+0x38>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	76da      	strb	r2, [r3, #27]
	mRobot.mLED->settetBrightness_B = B;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <__robot_set_led_light+0x38>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	797a      	ldrb	r2, [r7, #5]
 8000fa4:	775a      	strb	r2, [r3, #29]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000238 	.word	0x20000238

08000fb8 <__startDistanceMeasure>:

void __startDistanceMeasure(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	mRobot.mSonar->prevTime_us = 0;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
	mRobot.timeBaseTimer_1us->Instance->CNT = 0;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
	mRobot.mSonar->isMeasureReady = 0;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	721a      	strb	r2, [r3, #8]

	HAL_GPIO_WritePin(mRobot.mSonar->triggerPort, mRobot.mSonar->triggerPin, GPIO_PIN_SET);
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	68d8      	ldr	r0, [r3, #12]
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	8b1b      	ldrh	r3, [r3, #24]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f001 fae5 	bl	80025b4 <HAL_GPIO_WritePin>
	while(mRobot.timeBaseTimer_1us->Instance->CNT - mRobot.mSonar->prevTime_us < 10);
 8000fea:	bf00      	nop
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <__startDistanceMeasure+0x6c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d9f5      	bls.n	8000fec <__startDistanceMeasure+0x34>
	HAL_GPIO_WritePin(mRobot.mSonar->triggerPort, mRobot.mSonar->triggerPin, GPIO_PIN_RESET);
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <__startDistanceMeasure+0x6c>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	68d8      	ldr	r0, [r3, #12]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <__startDistanceMeasure+0x6c>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	8b1b      	ldrh	r3, [r3, #24]
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	f001 fad0 	bl	80025b4 <HAL_GPIO_WritePin>

	mRobot.timeBaseTimer_1us->Instance->CNT = 0;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <__startDistanceMeasure+0x6c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000238 	.word	0x20000238

08001028 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if (htim == mRobot.IRQ_timer)
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d102      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		timeToUpdateStates = 1;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	}
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000238 	.word	0x20000238
 8001050:	20000258 	.word	0x20000258

08001054 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == mRobot.mSonar->echoPin) {
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	8b5b      	ldrh	r3, [r3, #26]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	429a      	cmp	r2, r3
 8001068:	d12a      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0x6c>
		if(HAL_GPIO_ReadPin(mRobot.mSonar->echoPort, mRobot.mSonar->echoPin) == GPIO_PIN_SET && mRobot.mSonar->isMeasureReady == 0){
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	8b5b      	ldrh	r3, [r3, #26]
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f001 fa83 	bl	8002584 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d10e      	bne.n	80010a2 <HAL_GPIO_EXTI_Callback+0x4e>
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	7a1b      	ldrb	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_GPIO_EXTI_Callback+0x4e>
			mRobot.mSonar->prevTime_us = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
			mRobot.timeBaseTimer_1us->Instance->CNT = 0;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
		else{
			mRobot.mSonar->currentResult_us = mRobot.timeBaseTimer_1us->Instance->CNT - mRobot.mSonar->prevTime_us;
			mRobot.mSonar->isMeasureReady = 1;
		}
	}
}
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x6c>
			mRobot.mSonar->currentResult_us = mRobot.timeBaseTimer_1us->Instance->CNT - mRobot.mSonar->prevTime_us;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	1a8a      	subs	r2, r1, r2
 80010b6:	601a      	str	r2, [r3, #0]
			mRobot.mSonar->isMeasureReady = 1;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2201      	movs	r2, #1
 80010be:	721a      	strb	r2, [r3, #8]
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000238 	.word	0x20000238

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a0      	sub	sp, #128	; 0x80
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f000 ff37 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f8cd 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 fbd3 	bl	8001884 <MX_GPIO_Init>
  MX_TIM8_Init();
 80010de:	f000 fafb 	bl	80016d8 <MX_TIM8_Init>
  MX_TIM2_Init();
 80010e2:	f000 f9af 	bl	8001444 <MX_TIM2_Init>
  MX_TIM7_Init();
 80010e6:	f000 fac3 	bl	8001670 <MX_TIM7_Init>
  MX_UART5_Init();
 80010ea:	f000 fba1 	bl	8001830 <MX_UART5_Init>
  MX_TIM1_Init();
 80010ee:	f000 f929 	bl	8001344 <MX_TIM1_Init>
  MX_TIM5_Init();
 80010f2:	f000 fa49 	bl	8001588 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	robotWheel rw, lw;
	RGB_led led;
	sonar son;
	mRobot.leftWheel = &lw;
 80010f6:	4a5c      	ldr	r2, [pc, #368]	; (8001268 <main+0x19c>)
 80010f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010fc:	6013      	str	r3, [r2, #0]
	mRobot.rightWheel = &rw;
 80010fe:	4a5a      	ldr	r2, [pc, #360]	; (8001268 <main+0x19c>)
 8001100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001104:	6053      	str	r3, [r2, #4]
	mRobot.mLED = &led;
 8001106:	4a58      	ldr	r2, [pc, #352]	; (8001268 <main+0x19c>)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	6093      	str	r3, [r2, #8]
	mRobot.mSonar = &son;
 800110e:	4a56      	ldr	r2, [pc, #344]	; (8001268 <main+0x19c>)
 8001110:	463b      	mov	r3, r7
 8001112:	60d3      	str	r3, [r2, #12]

	__robot_init();
 8001114:	f7ff fa42 	bl	800059c <__robot_init>

	uint32_t motorTime, ledTime, sonarTime, currTime;
	motorTime = ledTime = currTime = sonarTime = HAL_GetTick();
 8001118:	f000 ff7a 	bl	8002010 <HAL_GetTick>
 800111c:	6778      	str	r0, [r7, #116]	; 0x74
 800111e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001124:	67bb      	str	r3, [r7, #120]	; 0x78
 8001126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001128:	67fb      	str	r3, [r7, #124]	; 0x7c

	uint8_t motorState = 0, ledState = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		currTime = HAL_GetTick();
 8001136:	f000 ff6b 	bl	8002010 <HAL_GetTick>
 800113a:	66f8      	str	r0, [r7, #108]	; 0x6c

		if(timeToUpdateStates == 1){
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <main+0x1a0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10e      	bne.n	8001162 <main+0x96>
			timeToUpdateStates = 0;
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <main+0x1a0>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
			__robot_update_led_light();
 800114a:	f7ff fd17 	bl	8000b7c <__robot_update_led_light>
			__robot_update_wheel_speed(mRobot.leftWheel);
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <main+0x19c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fc3a 	bl	80009cc <__robot_update_wheel_speed>
			__robot_update_wheel_speed(mRobot.rightWheel);
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <main+0x19c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc35 	bl	80009cc <__robot_update_wheel_speed>
		}

		if(currTime - motorTime >= 3000 && motorState == 0){
 8001162:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800116c:	4293      	cmp	r3, r2
 800116e:	d90d      	bls.n	800118c <main+0xc0>
 8001170:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001174:	2b00      	cmp	r3, #0
 8001176:	d109      	bne.n	800118c <main+0xc0>
			__robot_Move(FORWARD, 99, 99);
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	2163      	movs	r1, #99	; 0x63
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fea5 	bl	8000ecc <__robot_Move>
			motorState = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			motorTime = currTime;
 8001188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800118a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if(currTime - motorTime >= 3000 && motorState == 1){
 800118c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800118e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001196:	4293      	cmp	r3, r2
 8001198:	d90f      	bls.n	80011ba <main+0xee>
 800119a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10b      	bne.n	80011ba <main+0xee>
			__robot_Move(BACWARD, -99, -99);
 80011a2:	f06f 0262 	mvn.w	r2, #98	; 0x62
 80011a6:	f06f 0162 	mvn.w	r1, #98	; 0x62
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fe8e 	bl	8000ecc <__robot_Move>
			motorState = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			motorTime = currTime;
 80011b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011b8:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if(currTime - ledTime >= 2000 && ledState == 0){
 80011ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011c4:	d30d      	bcc.n	80011e2 <main+0x116>
 80011c6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <main+0x116>
			__robot_set_led_light(99,0,0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2063      	movs	r0, #99	; 0x63
 80011d4:	f7ff fed2 	bl	8000f7c <__robot_set_led_light>
			ledState = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			ledTime = currTime;
 80011de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011e0:	67bb      	str	r3, [r7, #120]	; 0x78
		}

		if(currTime - ledTime >= 2000 && ledState == 1){
 80011e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011ec:	d30d      	bcc.n	800120a <main+0x13e>
 80011ee:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d109      	bne.n	800120a <main+0x13e>
			__robot_set_led_light(0,99,0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2163      	movs	r1, #99	; 0x63
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff febe 	bl	8000f7c <__robot_set_led_light>
			ledState = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			ledTime = currTime;
 8001206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001208:	67bb      	str	r3, [r7, #120]	; 0x78
		}

		if(currTime - ledTime >= 2000 && ledState == 2){
 800120a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800120c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001214:	d30d      	bcc.n	8001232 <main+0x166>
 8001216:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800121a:	2b02      	cmp	r3, #2
 800121c:	d109      	bne.n	8001232 <main+0x166>
			__robot_set_led_light(0,0,99);
 800121e:	2263      	movs	r2, #99	; 0x63
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff feaa 	bl	8000f7c <__robot_set_led_light>
			ledState = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			ledTime = currTime;
 800122e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001230:	67bb      	str	r3, [r7, #120]	; 0x78
		}

		if(currTime - sonarTime >= 100){
 8001232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b63      	cmp	r3, #99	; 0x63
 800123a:	d903      	bls.n	8001244 <main+0x178>
			sonarTime = currTime;
 800123c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800123e:	677b      	str	r3, [r7, #116]	; 0x74
			__startDistanceMeasure();
 8001240:	f7ff feba 	bl	8000fb8 <__startDistanceMeasure>
		}

		if(mRobot.mSonar->isMeasureReady == 1){
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <main+0x19c>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	7a1b      	ldrb	r3, [r3, #8]
 800124a:	2b01      	cmp	r3, #1
 800124c:	f47f af73 	bne.w	8001136 <main+0x6a>
			mRobot.mSonar->isMeasureReady = 0;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <main+0x19c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	721a      	strb	r2, [r3, #8]
			printf("Current distance value: %lu m", mRobot.mSonar->currentResult_us);
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <main+0x19c>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <main+0x1a4>)
 8001262:	f003 fbc5 	bl	80049f0 <iprintf>
		currTime = HAL_GetTick();
 8001266:	e766      	b.n	8001136 <main+0x6a>
 8001268:	20000238 	.word	0x20000238
 800126c:	20000258 	.word	0x20000258
 8001270:	08005924 	.word	0x08005924

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	; 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fbac 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <SystemClock_Config+0xc8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <SystemClock_Config+0xc8>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <SystemClock_Config+0xc8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <SystemClock_Config+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <SystemClock_Config+0xcc>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <SystemClock_Config+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 f98d 	bl	8002618 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f000 fb70 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2102      	movs	r1, #2
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fbef 	bl	8002b08 <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001330:	f000 fb5a 	bl	80019e8 <Error_Handler>
  }
}
 8001334:	bf00      	nop
 8001336:	3750      	adds	r7, #80	; 0x50
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b092      	sub	sp, #72	; 0x48
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2220      	movs	r2, #32
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fb36 	bl	80049e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <MX_TIM1_Init+0xf8>)
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <MX_TIM1_Init+0xfc>)
 8001378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <MX_TIM1_Init+0xf8>)
 800137c:	223f      	movs	r2, #63	; 0x3f
 800137e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <MX_TIM1_Init+0xf8>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001386:	4b2d      	ldr	r3, [pc, #180]	; (800143c <MX_TIM1_Init+0xf8>)
 8001388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_TIM1_Init+0xf8>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <MX_TIM1_Init+0xf8>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_TIM1_Init+0xf8>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80013a0:	4826      	ldr	r0, [pc, #152]	; (800143c <MX_TIM1_Init+0xf8>)
 80013a2:	f001 feb9 	bl	8003118 <HAL_TIM_OC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013ac:	f000 fb1c 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	4619      	mov	r1, r3
 80013be:	481f      	ldr	r0, [pc, #124]	; (800143c <MX_TIM1_Init+0xf8>)
 80013c0:	f002 fe40 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013ca:	f000 fb0d 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_TIM1_Init+0xf8>)
 80013f4:	f002 f908 	bl	8003608 <HAL_TIM_OC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80013fe:	f000 faf3 	bl	80019e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM1_Init+0xf8>)
 8001426:	f002 fe89 	bl	800413c <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001430:	f000 fada 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3748      	adds	r7, #72	; 0x48
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000008c 	.word	0x2000008c
 8001440:	40010000 	.word	0x40010000

08001444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <MX_TIM2_Init+0x140>)
 8001476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <MX_TIM2_Init+0x140>)
 800147e:	229f      	movs	r2, #159	; 0x9f
 8001480:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <MX_TIM2_Init+0x140>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <MX_TIM2_Init+0x140>)
 800148a:	2263      	movs	r2, #99	; 0x63
 800148c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <MX_TIM2_Init+0x140>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_TIM2_Init+0x140>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149a:	483a      	ldr	r0, [pc, #232]	; (8001584 <MX_TIM2_Init+0x140>)
 800149c:	f001 fd14 	bl	8002ec8 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014a6:	f000 fa9f 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4833      	ldr	r0, [pc, #204]	; (8001584 <MX_TIM2_Init+0x140>)
 80014b8:	f002 f9c4 	bl	8003844 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014c2:	f000 fa91 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <MX_TIM2_Init+0x140>)
 80014c8:	f001 fe26 	bl	8003118 <HAL_TIM_OC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014d2:	f000 fa89 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d6:	482b      	ldr	r0, [pc, #172]	; (8001584 <MX_TIM2_Init+0x140>)
 80014d8:	f001 fe6d 	bl	80031b6 <HAL_TIM_PWM_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80014e2:	f000 fa81 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	4619      	mov	r1, r3
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MX_TIM2_Init+0x140>)
 80014f6:	f002 fda5 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001500:	f000 fa72 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9;
 8001508:	2309      	movs	r3, #9
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_TIM2_Init+0x140>)
 800151c:	f002 f874 	bl	8003608 <HAL_TIM_OC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001526:	f000 fa5f 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152a:	2360      	movs	r3, #96	; 0x60
 800152c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_TIM2_Init+0x140>)
 800153a:	f002 f8c1 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001544:	f000 fa50 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2208      	movs	r2, #8
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <MX_TIM2_Init+0x140>)
 8001550:	f002 f8b6 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800155a:	f000 fa45 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	220c      	movs	r2, #12
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM2_Init+0x140>)
 8001566:	f002 f8ab 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x130>
  {
    Error_Handler();
 8001570:	f000 fa3a 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM2_Init+0x140>)
 8001576:	f000 faf7 	bl	8001b68 <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3738      	adds	r7, #56	; 0x38
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200000d4 	.word	0x200000d4

08001588 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015ba:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <MX_TIM5_Init+0xe0>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <MX_TIM5_Init+0xe4>)
 80015ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015de:	f001 fc73 	bl	8002ec8 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80015e8:	f000 f9fe 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f6:	4619      	mov	r1, r3
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_TIM5_Init+0xdc>)
 80015fa:	f002 f923 	bl	8003844 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001604:	f000 f9f0 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM5_Init+0xdc>)
 800160a:	f001 fd85 	bl	8003118 <HAL_TIM_OC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 f9e8 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4619      	mov	r1, r3
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_TIM5_Init+0xdc>)
 8001628:	f002 fd0c 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001632:	f000 f9d9 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM5_Init+0xdc>)
 800164e:	f001 ffdb 	bl	8003608 <HAL_TIM_OC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001658:	f000 f9c6 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000011c 	.word	0x2000011c
 8001668:	40000c00 	.word	0x40000c00
 800166c:	000f423f 	.word	0x000f423f

08001670 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_TIM7_Init+0x60>)
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <MX_TIM7_Init+0x64>)
 8001682:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 141;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_TIM7_Init+0x60>)
 8001686:	228d      	movs	r2, #141	; 0x8d
 8001688:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_TIM7_Init+0x60>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_TIM7_Init+0x60>)
 8001692:	2213      	movs	r2, #19
 8001694:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_TIM7_Init+0x60>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM7_Init+0x60>)
 800169e:	f001 fc13 	bl	8002ec8 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80016a8:	f000 f99e 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM7_Init+0x60>)
 80016ba:	f002 fcc3 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80016c4:	f000 f990 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000164 	.word	0x20000164
 80016d4:	40001400 	.word	0x40001400

080016d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b096      	sub	sp, #88	; 0x58
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2220      	movs	r2, #32
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f003 f965 	bl	80049e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001716:	4b44      	ldr	r3, [pc, #272]	; (8001828 <MX_TIM8_Init+0x150>)
 8001718:	4a44      	ldr	r2, [pc, #272]	; (800182c <MX_TIM8_Init+0x154>)
 800171a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 159;
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <MX_TIM8_Init+0x150>)
 800171e:	229f      	movs	r2, #159	; 0x9f
 8001720:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <MX_TIM8_Init+0x150>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8001728:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <MX_TIM8_Init+0x150>)
 800172a:	2263      	movs	r2, #99	; 0x63
 800172c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <MX_TIM8_Init+0x150>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001734:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <MX_TIM8_Init+0x150>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <MX_TIM8_Init+0x150>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001740:	4839      	ldr	r0, [pc, #228]	; (8001828 <MX_TIM8_Init+0x150>)
 8001742:	f001 fbc1 	bl	8002ec8 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800174c:	f000 f94c 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800175a:	4619      	mov	r1, r3
 800175c:	4832      	ldr	r0, [pc, #200]	; (8001828 <MX_TIM8_Init+0x150>)
 800175e:	f002 f871 	bl	8003844 <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001768:	f000 f93e 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800176c:	482e      	ldr	r0, [pc, #184]	; (8001828 <MX_TIM8_Init+0x150>)
 800176e:	f001 fd22 	bl	80031b6 <HAL_TIM_PWM_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001778:	f000 f936 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001788:	4619      	mov	r1, r3
 800178a:	4827      	ldr	r0, [pc, #156]	; (8001828 <MX_TIM8_Init+0x150>)
 800178c:	f002 fc5a 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001796:	f000 f927 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179a:	2360      	movs	r3, #96	; 0x60
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	481a      	ldr	r0, [pc, #104]	; (8001828 <MX_TIM8_Init+0x150>)
 80017c0:	f001 ff7e 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80017ca:	f000 f90d 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	2208      	movs	r2, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <MX_TIM8_Init+0x150>)
 80017d8:	f001 ff72 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80017e2:	f000 f901 	bl	80019e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM8_Init+0x150>)
 800180a:	f002 fc97 	bl	800413c <HAL_TIMEx_ConfigBreakDeadTime>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001814:	f000 f8e8 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM8_Init+0x150>)
 800181a:	f000 f9a5 	bl	8001b68 <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3758      	adds	r7, #88	; 0x58
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001ac 	.word	0x200001ac
 800182c:	40010400 	.word	0x40010400

08001830 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_UART5_Init+0x4c>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <MX_UART5_Init+0x50>)
 8001838:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_UART5_Init+0x4c>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_UART5_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_UART5_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_UART5_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_UART5_Init+0x4c>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_UART5_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_UART5_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_UART5_Init+0x4c>)
 8001868:	f002 fcce 	bl	8004208 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001872:	f000 f8b9 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001f4 	.word	0x200001f4
 8001880:	40005000 	.word	0x40005000

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <MX_GPIO_Init+0x154>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_GPIO_Init+0x154>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONAR_ENABLE_GPIO_Port, SONAR_ENABLE_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	482b      	ldr	r0, [pc, #172]	; (80019dc <MX_GPIO_Init+0x158>)
 800192e:	f000 fe41 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_R_PH_Pin|MOTOR_L_PH_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001938:	4829      	ldr	r0, [pc, #164]	; (80019e0 <MX_GPIO_Init+0x15c>)
 800193a:	f000 fe3b 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001944:	4827      	ldr	r0, [pc, #156]	; (80019e4 <MX_GPIO_Init+0x160>)
 8001946:	f000 fe35 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 800194a:	2320      	movs	r3, #32
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800194e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	481f      	ldr	r0, [pc, #124]	; (80019dc <MX_GPIO_Init+0x158>)
 8001960:	f000 fc74 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ENABLE_Pin */
  GPIO_InitStruct.Pin = SONAR_ENABLE_Pin;
 8001964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SONAR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <MX_GPIO_Init+0x158>)
 800197e:	f000 fc65 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_PH_Pin MOTOR_L_PH_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_PH_Pin|MOTOR_L_PH_Pin;
 8001982:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_GPIO_Init+0x15c>)
 800199c:	f000 fc56 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_TRIGGER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SONAR_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <MX_GPIO_Init+0x160>)
 80019ba:	f000 fc47 	bl	800224c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2017      	movs	r0, #23
 80019c4:	f000 fc0b 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019c8:	2017      	movs	r0, #23
 80019ca:	f000 fc24 	bl	8002216 <HAL_NVIC_EnableIRQ>

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020400 	.word	0x40020400

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_TIM_OC_MspInit+0x3c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10d      	bne.n	8001a72 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_OC_MspInit+0x40>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_TIM_OC_MspInit+0x40>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_OC_MspInit+0x40>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d116      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	201c      	movs	r0, #28
 8001abc:	f000 fb8f 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac0:	201c      	movs	r0, #28
 8001ac2:	f000 fba8 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ac6:	e042      	b.n	8001b4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_TIM_Base_MspInit+0xd4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	e02e      	b.n	8001b4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_TIM_Base_MspInit+0xd8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d116      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210a      	movs	r1, #10
 8001b1a:	2037      	movs	r0, #55	; 0x37
 8001b1c:	f000 fb5f 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b20:	2037      	movs	r0, #55	; 0x37
 8001b22:	f000 fb78 	bl	8002216 <HAL_NVIC_EnableIRQ>
}
 8001b26:	e012      	b.n	8001b4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_TIM_Base_MspInit+0xdc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_TIM_Base_MspInit+0xd0>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40000c00 	.word	0x40000c00
 8001b60:	40001400 	.word	0x40001400
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d11e      	bne.n	8001bc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 8001ba6:	230e      	movs	r3, #14
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4816      	ldr	r0, [pc, #88]	; (8001c1c <HAL_TIM_MspPostInit+0xb4>)
 8001bc2:	f000 fb43 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001bc6:	e023      	b.n	8001c10 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <HAL_TIM_MspPostInit+0xb8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_TIM_MspPostInit+0xb0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_R_EN_Pin|MOTOR_L_EN_Pin;
 8001bee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c00:	2303      	movs	r3, #3
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <HAL_TIM_MspPostInit+0xbc>)
 8001c0c:	f000 fb1e 	bl	800224c <HAL_GPIO_Init>
}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40020800 	.word	0x40020800

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_UART_MspInit+0xc0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d14a      	bne.n	8001ce0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001cbc:	f000 fac6 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_UART_MspInit+0xcc>)
 8001cdc:	f000 fab6 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40005000 	.word	0x40005000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f000 f950 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8001d50:	2020      	movs	r0, #32
 8001d52:	f000 fc49 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM2_IRQHandler+0x10>)
 8001d62:	f001 fb49 	bl	80033f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200000d4 	.word	0x200000d4

08001d70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM7_IRQHandler+0x10>)
 8001d76:	f001 fb3f 	bl	80033f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000164 	.word	0x20000164

08001d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00a      	b.n	8001dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d96:	f3af 8000 	nop.w
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf0      	blt.n	8001d96 <_read+0x12>
  }

  return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e009      	b.n	8001de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbcb 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf1      	blt.n	8001dd0 <_write+0x12>
  }
  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_close>:

int _close(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_isatty>:

int _isatty(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f002 fd7c 	bl	800498c <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20020000 	.word	0x20020000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	2000025c 	.word	0x2000025c
 8001ec8:	20000278 	.word	0x20000278

08001ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <SystemInit+0x20>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <SystemInit+0x20>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ef6:	490e      	ldr	r1, [pc, #56]	; (8001f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f0c:	4c0b      	ldr	r4, [pc, #44]	; (8001f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f1a:	f7ff ffd7 	bl	8001ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f002 fd3b 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f22:	f7ff f8d3 	bl	80010cc <main>
  bx  lr    
 8001f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f34:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 8001f38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f3c:	20000274 	.word	0x20000274

08001f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_Init+0x40>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_Init+0x40>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_Init+0x40>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f92b 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	200f      	movs	r0, #15
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff fd3c 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f943 	bl	8002232 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f90b 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008
 800200c:	20000260 	.word	0x20000260

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000260 	.word	0x20000260

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e16b      	b.n	8002540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 815a 	bne.w	800253a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80b4 	beq.w	800253a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_GPIO_Init+0x30c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a5f      	ldr	r2, [pc, #380]	; (8002558 <HAL_GPIO_Init+0x30c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <HAL_GPIO_Init+0x30c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a5b      	ldr	r2, [pc, #364]	; (800255c <HAL_GPIO_Init+0x310>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_GPIO_Init+0x314>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02b      	beq.n	8002472 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a51      	ldr	r2, [pc, #324]	; (8002564 <HAL_GPIO_Init+0x318>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_GPIO_Init+0x31c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	; (800256c <HAL_GPIO_Init+0x320>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x21a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_GPIO_Init+0x324>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x216>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_GPIO_Init+0x328>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x212>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x32c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_GPIO_Init+0x330>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x20a>
 8002452:	2307      	movs	r3, #7
 8002454:	e00e      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002456:	2308      	movs	r3, #8
 8002458:	e00c      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800245a:	2306      	movs	r3, #6
 800245c:	e00a      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800245e:	2305      	movs	r3, #5
 8002460:	e008      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002462:	2304      	movs	r3, #4
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002472:	2300      	movs	r3, #0
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002484:	4935      	ldr	r1, [pc, #212]	; (800255c <HAL_GPIO_Init+0x310>)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_GPIO_Init+0x334>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_GPIO_Init+0x334>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x334>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250a:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_GPIO_Init+0x334>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_GPIO_Init+0x334>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <HAL_GPIO_Init+0x334>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	f67f ae90 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40013800 	.word	0x40013800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40021400 	.word	0x40021400
 8002578:	40021800 	.word	0x40021800
 800257c:	40021c00 	.word	0x40021c00
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e001      	b.n	80025a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d0:	e003      	b.n	80025da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fd24 	bl	8001054 <HAL_GPIO_EXTI_Callback>
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e267      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b85      	ldr	r3, [pc, #532]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b82      	ldr	r3, [pc, #520]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b7e      	ldr	r3, [pc, #504]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e242      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6f      	ldr	r2, [pc, #444]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6c      	ldr	r2, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fc9e 	bl	8002010 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fc9a 	bl	8002010 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e207      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff fc8a 	bl	8002010 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fc86 	bl	8002010 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f3      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b51      	ldr	r3, [pc, #324]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c7      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x244>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7ff fc3f 	bl	8002010 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7ff fc3b 	bl	8002010 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a8      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x244>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff fc1e 	bl	8002010 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7ff fc1a 	bl	8002010 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e187      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x248>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7ff fbfe 	bl	8002010 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff fbfa 	bl	8002010 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e167      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x248>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fbe7 	bl	8002010 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7ff fbe3 	bl	8002010 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e150      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b77      	ldr	r3, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7ff fba3 	bl	8002010 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7ff fb9f 	bl	8002010 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e10c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ea>
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x30c>
 800290a:	4b5f      	ldr	r3, [pc, #380]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5e      	ldr	r2, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a5b      	ldr	r2, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002924:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7ff fb64 	bl	8002010 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7ff fb60 	bl	8002010 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0cb      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x334>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7ff fb4e 	bl	8002010 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7ff fb4a 	bl	8002010 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0b5      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d05c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d141      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff fb1e 	bl	8002010 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff fb1a 	bl	8002010 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e087      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	491b      	ldr	r1, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff faf3 	bl	8002010 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7ff faef 	bl	8002010 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e05c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x416>
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff fadc 	bl	8002010 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7ff fad8 	bl	8002010 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e045      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
 8002a7a:	e03d      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e038      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d121      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7ff fa0a 	bl	8002010 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7ff fa06 	bl	8002010 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f96a 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08005944 	.word	0x08005944
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b090      	sub	sp, #64	; 0x40
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80a1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d0c:	e09b      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d12:	e098      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	627a      	str	r2, [r7, #36]	; 0x24
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d40:	fb03 f201 	mul.w	r2, r3, r1
 8002d44:	2300      	movs	r3, #0
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a43      	ldr	r2, [pc, #268]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d54:	460a      	mov	r2, r1
 8002d56:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	2200      	movs	r2, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d6e:	f7fd fa7f 	bl	8000270 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4613      	mov	r3, r2
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	e053      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	617a      	str	r2, [r7, #20]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d8e:	f04f 0b00 	mov.w	fp, #0
 8002d92:	4652      	mov	r2, sl
 8002d94:	465b      	mov	r3, fp
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dae:	eb63 090b 	sbc.w	r9, r3, fp
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dca:	eb63 0509 	sbc.w	r5, r3, r9
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	00eb      	lsls	r3, r5, #3
 8002dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ddc:	00e2      	lsls	r2, r4, #3
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	eb14 030a 	adds.w	r3, r4, sl
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	eb45 030b 	adc.w	r3, r5, fp
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e18:	f7fd fa2a 	bl	8000270 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3740      	adds	r7, #64	; 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	017d7840 	.word	0x017d7840

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08005954 	.word	0x08005954

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08005954 	.word	0x08005954

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e041      	b.n	8002f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fdca 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 fd8c 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e046      	b.n	800300e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_TIM_Base_Start+0xb4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_TIM_Base_Start+0xb8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_TIM_Base_Start+0xbc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_TIM_Base_Start+0xc0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIM_Base_Start+0xc4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_TIM_Base_Start+0xc8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x70>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_Base_Start+0xcc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e007      	b.n	800300c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40014000 	.word	0x40014000
 8003034:	40001800 	.word	0x40001800

08003038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d001      	beq.n	8003050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e04e      	b.n	80030ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a23      	ldr	r2, [pc, #140]	; (80030fc <HAL_TIM_Base_Start_IT+0xc4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d022      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d01d      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <HAL_TIM_Base_Start_IT+0xc8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d018      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_TIM_Base_Start_IT+0xcc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_TIM_Base_Start_IT+0xd0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_TIM_Base_Start_IT+0xd4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_TIM_Base_Start_IT+0xd8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x80>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_TIM_Base_Start_IT+0xdc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d010      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	e007      	b.n	80030ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800
 8003108:	40000c00 	.word	0x40000c00
 800310c:	40010400 	.word	0x40010400
 8003110:	40014000 	.word	0x40014000
 8003114:	40001800 	.word	0x40001800

08003118 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fc80 	bl	8001a44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fc64 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e041      	b.n	800324c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f839 	bl	8003254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 fc15 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x24>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e022      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d109      	bne.n	80032a6 <HAL_TIM_PWM_Start+0x3e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e015      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07c      	b.n	80033d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0x82>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	e013      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0x92>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	e003      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fe6c 	bl	8003ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2d      	ldr	r2, [pc, #180]	; (80033dc <HAL_TIM_PWM_Start+0x174>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_TIM_PWM_Start+0xcc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2c      	ldr	r2, [pc, #176]	; (80033e0 <HAL_TIM_PWM_Start+0x178>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_TIM_PWM_Start+0xd0>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_TIM_PWM_Start+0xd2>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_TIM_PWM_Start+0x174>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d01d      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_TIM_PWM_Start+0x17c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_TIM_PWM_Start+0x180>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_TIM_PWM_Start+0x184>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_TIM_PWM_Start+0x178>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_PWM_Start+0x188>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_TIM_PWM_Start+0x18c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d010      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	e007      	b.n	80033d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40010400 	.word	0x40010400
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40001800 	.word	0x40001800

080033f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0202 	mvn.w	r2, #2
 8003424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fad3 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fac5 	bl	80039d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fad6 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0204 	mvn.w	r2, #4
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 faa9 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa9b 	bl	80039d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 faac 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0208 	mvn.w	r2, #8
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2204      	movs	r2, #4
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa7f 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa71 	bl	80039d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa82 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b10      	cmp	r3, #16
 8003508:	d122      	bne.n	8003550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d11b      	bne.n	8003550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0210 	mvn.w	r2, #16
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2208      	movs	r2, #8
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa55 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa47 	bl	80039d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa58 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0201 	mvn.w	r2, #1
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fd56 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fe26 	bl	80041f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa1d 	bl	8003a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0220 	mvn.w	r2, #32
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fdf0 	bl	80041e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003622:	2302      	movs	r3, #2
 8003624:	e048      	b.n	80036b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d839      	bhi.n	80036a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	080036a9 	.word	0x080036a9
 8003644:	080036a9 	.word	0x080036a9
 8003648:	080036a9 	.word	0x080036a9
 800364c:	0800367f 	.word	0x0800367f
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036a9 	.word	0x080036a9
 8003658:	080036a9 	.word	0x080036a9
 800365c:	0800368d 	.word	0x0800368d
 8003660:	080036a9 	.word	0x080036a9
 8003664:	080036a9 	.word	0x080036a9
 8003668:	080036a9 	.word	0x080036a9
 800366c:	0800369b 	.word	0x0800369b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa74 	bl	8003b64 <TIM_OC1_SetConfig>
      break;
 800367c:	e017      	b.n	80036ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fadd 	bl	8003c44 <TIM_OC2_SetConfig>
      break;
 800368a:	e010      	b.n	80036ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb4c 	bl	8003d30 <TIM_OC3_SetConfig>
      break;
 8003698:	e009      	b.n	80036ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fbb9 	bl	8003e18 <TIM_OC4_SetConfig>
      break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0ae      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	f200 809f 	bhi.w	800382c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ee:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003729 	.word	0x08003729
 80036f8:	0800382d 	.word	0x0800382d
 80036fc:	0800382d 	.word	0x0800382d
 8003700:	0800382d 	.word	0x0800382d
 8003704:	08003769 	.word	0x08003769
 8003708:	0800382d 	.word	0x0800382d
 800370c:	0800382d 	.word	0x0800382d
 8003710:	0800382d 	.word	0x0800382d
 8003714:	080037ab 	.word	0x080037ab
 8003718:	0800382d 	.word	0x0800382d
 800371c:	0800382d 	.word	0x0800382d
 8003720:	0800382d 	.word	0x0800382d
 8003724:	080037eb 	.word	0x080037eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa18 	bl	8003b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	619a      	str	r2, [r3, #24]
      break;
 8003766:	e064      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa68 	bl	8003c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6999      	ldr	r1, [r3, #24]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	619a      	str	r2, [r3, #24]
      break;
 80037a8:	e043      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fabd 	bl	8003d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0208 	orr.w	r2, r2, #8
 80037c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0204 	bic.w	r2, r2, #4
 80037d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	61da      	str	r2, [r3, #28]
      break;
 80037e8:	e023      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fb11 	bl	8003e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	61da      	str	r2, [r3, #28]
      break;
 800382a:	e002      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	75fb      	strb	r3, [r7, #23]
      break;
 8003830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIM_ConfigClockSource+0x1c>
 800385c:	2302      	movs	r3, #2
 800385e:	e0b4      	b.n	80039ca <HAL_TIM_ConfigClockSource+0x186>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800387e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003898:	d03e      	beq.n	8003918 <HAL_TIM_ConfigClockSource+0xd4>
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	f200 8087 	bhi.w	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	f000 8086 	beq.w	80039b6 <HAL_TIM_ConfigClockSource+0x172>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	d87f      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b70      	cmp	r3, #112	; 0x70
 80038b2:	d01a      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xa6>
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d87b      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b60      	cmp	r3, #96	; 0x60
 80038ba:	d050      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x11a>
 80038bc:	2b60      	cmp	r3, #96	; 0x60
 80038be:	d877      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b50      	cmp	r3, #80	; 0x50
 80038c2:	d03c      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xfa>
 80038c4:	2b50      	cmp	r3, #80	; 0x50
 80038c6:	d873      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d058      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x13a>
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d86f      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b30      	cmp	r3, #48	; 0x30
 80038d2:	d064      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x15a>
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d86b      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d060      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d867      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05c      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d05a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	e062      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f000 fb5d 	bl	8003fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800390c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	609a      	str	r2, [r3, #8]
      break;
 8003916:	e04f      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f000 fb46 	bl	8003fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393a:	609a      	str	r2, [r3, #8]
      break;
 800393c:	e03c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 faba 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2150      	movs	r1, #80	; 0x50
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fb13 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 800395c:	e02c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	461a      	mov	r2, r3
 800396c:	f000 fad9 	bl	8003f22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2160      	movs	r1, #96	; 0x60
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fb03 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 800397c:	e01c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	461a      	mov	r2, r3
 800398c:	f000 fa9a 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	4618      	mov	r0, r3
 8003998:	f000 faf3 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 800399c:	e00c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f000 faea 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 80039ae:	e003      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <TIM_Base_SetConfig+0x114>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d00f      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <TIM_Base_SetConfig+0x118>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <TIM_Base_SetConfig+0x11c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <TIM_Base_SetConfig+0x120>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3a      	ldr	r2, [pc, #232]	; (8003b48 <TIM_Base_SetConfig+0x124>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <TIM_Base_SetConfig+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d02b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d027      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <TIM_Base_SetConfig+0x118>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d023      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <TIM_Base_SetConfig+0x11c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <TIM_Base_SetConfig+0x120>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <TIM_Base_SetConfig+0x124>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d017      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <TIM_Base_SetConfig+0x128>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <TIM_Base_SetConfig+0x130>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <TIM_Base_SetConfig+0x134>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <TIM_Base_SetConfig+0x138>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <TIM_Base_SetConfig+0x114>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0xf8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	615a      	str	r2, [r3, #20]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40010400 	.word	0x40010400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	40001800 	.word	0x40001800
 8003b5c:	40001c00 	.word	0x40001c00
 8003b60:	40002000 	.word	0x40002000

08003b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0201 	bic.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <TIM_OC1_SetConfig+0xd8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x64>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <TIM_OC1_SetConfig+0xdc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0308 	bic.w	r3, r3, #8
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <TIM_OC1_SetConfig+0xd8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_OC1_SetConfig+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <TIM_OC1_SetConfig+0xdc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40010400 	.word	0x40010400

08003c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0210 	bic.w	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0320 	bic.w	r3, r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <TIM_OC2_SetConfig+0xe4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0x68>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <TIM_OC2_SetConfig+0xe8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <TIM_OC2_SetConfig+0xe4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x94>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC2_SetConfig+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d113      	bne.n	8003d00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40010400 	.word	0x40010400

08003d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <TIM_OC3_SetConfig+0xe0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_OC3_SetConfig+0x66>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <TIM_OC3_SetConfig+0xe4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <TIM_OC3_SetConfig+0xe0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC3_SetConfig+0x92>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <TIM_OC3_SetConfig+0xe4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <TIM_OC4_SetConfig+0xa4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC4_SetConfig+0x68>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <TIM_OC4_SetConfig+0xa8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d109      	bne.n	8003e94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 030a 	bic.w	r3, r3, #10
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f043 0307 	orr.w	r3, r3, #7
 8003fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2201      	movs	r2, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004058:	2302      	movs	r3, #2
 800405a:	e05a      	b.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d01d      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d10c      	bne.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800

0800413c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e03d      	b.n	80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e03f      	b.n	800429a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fcfa 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f929 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	; 0x28
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d17c      	bne.n	80043bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit+0x2c>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e075      	b.n	80043be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x3e>
 80042dc:	2302      	movs	r3, #2
 80042de:	e06e      	b.n	80043be <HAL_UART_Transmit+0x11c>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2221      	movs	r2, #33	; 0x21
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f6:	f7fd fe8b 	bl	8002010 <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d108      	bne.n	8004324 <HAL_UART_Transmit+0x82>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e003      	b.n	800432c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004334:	e02a      	b.n	800438c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f840 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e036      	b.n	80043be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3302      	adds	r3, #2
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e007      	b.n	800437e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3301      	adds	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1cf      	bne.n	8004336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2140      	movs	r1, #64	; 0x40
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f810 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e006      	b.n	80043be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b090      	sub	sp, #64	; 0x40
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	e050      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d04c      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e6:	f7fd fe13 	bl	8002010 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d241      	bcs.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004416:	637a      	str	r2, [r7, #52]	; 0x34
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	613b      	str	r3, [r7, #16]
   return(result);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444a:	623a      	str	r2, [r7, #32]
 800444c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	69f9      	ldr	r1, [r7, #28]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	61bb      	str	r3, [r7, #24]
   return(result);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d09f      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3740      	adds	r7, #64	; 0x40
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b0c0      	sub	sp, #256	; 0x100
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	ea40 0301 	orr.w	r3, r0, r1
 80044cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044fc:	f021 010c 	bic.w	r1, r1, #12
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	6999      	ldr	r1, [r3, #24]
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	ea40 0301 	orr.w	r3, r0, r1
 800452a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <UART_SetConfig+0x2cc>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d005      	beq.n	8004544 <UART_SetConfig+0xa0>
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b8d      	ldr	r3, [pc, #564]	; (8004774 <UART_SetConfig+0x2d0>)
 8004540:	429a      	cmp	r2, r3
 8004542:	d104      	bne.n	800454e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe fcac 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8004548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800454c:	e003      	b.n	8004556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454e:	f7fe fc93 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004552:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	f040 810c 	bne.w	800477c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	1891      	adds	r1, r2, r2
 800457c:	65b9      	str	r1, [r7, #88]	; 0x58
 800457e:	415b      	adcs	r3, r3
 8004580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004586:	4621      	mov	r1, r4
 8004588:	eb12 0801 	adds.w	r8, r2, r1
 800458c:	4629      	mov	r1, r5
 800458e:	eb43 0901 	adc.w	r9, r3, r1
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a6:	4690      	mov	r8, r2
 80045a8:	4699      	mov	r9, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	eb18 0303 	adds.w	r3, r8, r3
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b4:	462b      	mov	r3, r5
 80045b6:	eb49 0303 	adc.w	r3, r9, r3
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045d2:	460b      	mov	r3, r1
 80045d4:	18db      	adds	r3, r3, r3
 80045d6:	653b      	str	r3, [r7, #80]	; 0x50
 80045d8:	4613      	mov	r3, r2
 80045da:	eb42 0303 	adc.w	r3, r2, r3
 80045de:	657b      	str	r3, [r7, #84]	; 0x54
 80045e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045e8:	f7fb fe42 	bl	8000270 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <UART_SetConfig+0x2d4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004604:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	64b9      	str	r1, [r7, #72]	; 0x48
 8004614:	415b      	adcs	r3, r3
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800461c:	4641      	mov	r1, r8
 800461e:	eb12 0a01 	adds.w	sl, r2, r1
 8004622:	4649      	mov	r1, r9
 8004624:	eb43 0b01 	adc.w	fp, r3, r1
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463c:	4692      	mov	sl, r2
 800463e:	469b      	mov	fp, r3
 8004640:	4643      	mov	r3, r8
 8004642:	eb1a 0303 	adds.w	r3, sl, r3
 8004646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800464a:	464b      	mov	r3, r9
 800464c:	eb4b 0303 	adc.w	r3, fp, r3
 8004650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	647b      	str	r3, [r7, #68]	; 0x44
 8004676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800467a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800467e:	f7fb fdf7 	bl	8000270 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4611      	mov	r1, r2
 8004688:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <UART_SetConfig+0x2d4>)
 800468a:	fba3 2301 	umull	r2, r3, r3, r1
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2264      	movs	r2, #100	; 0x64
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	1acb      	subs	r3, r1, r3
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <UART_SetConfig+0x2d4>)
 80046a0:	fba3 2302 	umull	r2, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046ac:	441c      	add	r4, r3
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c8:	415b      	adcs	r3, r3
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6339      	str	r1, [r7, #48]	; 0x30
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800471c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800473a:	f7fb fd99 	bl	8000270 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <UART_SetConfig+0x2d4>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3332      	adds	r3, #50	; 0x32
 8004756:	4a08      	ldr	r2, [pc, #32]	; (8004778 <UART_SetConfig+0x2d4>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0207 	and.w	r2, r3, #7
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4422      	add	r2, r4
 800476a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800476c:	e105      	b.n	800497a <UART_SetConfig+0x4d6>
 800476e:	bf00      	nop
 8004770:	40011000 	.word	0x40011000
 8004774:	40011400 	.word	0x40011400
 8004778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800478a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800478e:	4642      	mov	r2, r8
 8004790:	464b      	mov	r3, r9
 8004792:	1891      	adds	r1, r2, r2
 8004794:	6239      	str	r1, [r7, #32]
 8004796:	415b      	adcs	r3, r3
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479e:	4641      	mov	r1, r8
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0501 	adc.w	r5, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c4:	464b      	mov	r3, r9
 80047c6:	eb45 0303 	adc.w	r3, r5, r3
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ea:	4629      	mov	r1, r5
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	4621      	mov	r1, r4
 80047f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f4:	4621      	mov	r1, r4
 80047f6:	008a      	lsls	r2, r1, #2
 80047f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047fc:	f7fb fd38 	bl	8000270 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4b60      	ldr	r3, [pc, #384]	; (8004988 <UART_SetConfig+0x4e4>)
 8004806:	fba3 2302 	umull	r2, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	011c      	lsls	r4, r3, #4
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800481c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	61b9      	str	r1, [r7, #24]
 8004828:	415b      	adcs	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6139      	str	r1, [r7, #16]
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	67bb      	str	r3, [r7, #120]	; 0x78
 800487a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004888:	4649      	mov	r1, r9
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004892:	4641      	mov	r1, r8
 8004894:	008a      	lsls	r2, r1, #2
 8004896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800489a:	f7fb fce9 	bl	8000270 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4b39      	ldr	r3, [pc, #228]	; (8004988 <UART_SetConfig+0x4e4>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a34      	ldr	r2, [pc, #208]	; (8004988 <UART_SetConfig+0x4e4>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c2:	441c      	add	r4, r3
 80048c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c8:	2200      	movs	r2, #0
 80048ca:	673b      	str	r3, [r7, #112]	; 0x70
 80048cc:	677a      	str	r2, [r7, #116]	; 0x74
 80048ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	415b      	adcs	r3, r3
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e2:	4641      	mov	r1, r8
 80048e4:	1851      	adds	r1, r2, r1
 80048e6:	6039      	str	r1, [r7, #0]
 80048e8:	4649      	mov	r1, r9
 80048ea:	414b      	adcs	r3, r1
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048fa:	4659      	mov	r1, fp
 80048fc:	00cb      	lsls	r3, r1, #3
 80048fe:	4651      	mov	r1, sl
 8004900:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004904:	4651      	mov	r1, sl
 8004906:	00ca      	lsls	r2, r1, #3
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	4603      	mov	r3, r0
 800490e:	4642      	mov	r2, r8
 8004910:	189b      	adds	r3, r3, r2
 8004912:	66bb      	str	r3, [r7, #104]	; 0x68
 8004914:	464b      	mov	r3, r9
 8004916:	460a      	mov	r2, r1
 8004918:	eb42 0303 	adc.w	r3, r2, r3
 800491c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	663b      	str	r3, [r7, #96]	; 0x60
 8004928:	667a      	str	r2, [r7, #100]	; 0x64
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004936:	4649      	mov	r1, r9
 8004938:	008b      	lsls	r3, r1, #2
 800493a:	4641      	mov	r1, r8
 800493c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004940:	4641      	mov	r1, r8
 8004942:	008a      	lsls	r2, r1, #2
 8004944:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004948:	f7fb fc92 	bl	8000270 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <UART_SetConfig+0x4e4>)
 8004952:	fba3 1302 	umull	r1, r3, r3, r2
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2164      	movs	r1, #100	; 0x64
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	3332      	adds	r3, #50	; 0x32
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <UART_SetConfig+0x4e4>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4422      	add	r2, r4
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	bf00      	nop
 800497c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4d0d      	ldr	r5, [pc, #52]	; (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2600      	movs	r6, #0
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4d0b      	ldr	r5, [pc, #44]	; (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	; (80049dc <__libc_init_array+0x44>)
 80049ac:	f000 ffae 	bl	800590c <_init>
 80049b0:	1b64      	subs	r4, r4, r5
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2600      	movs	r6, #0
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	080059fc 	.word	0x080059fc
 80049d4:	080059fc 	.word	0x080059fc
 80049d8:	080059fc 	.word	0x080059fc
 80049dc:	08005a00 	.word	0x08005a00

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <iprintf>:
 80049f0:	b40f      	push	{r0, r1, r2, r3}
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <iprintf+0x2c>)
 80049f4:	b513      	push	{r0, r1, r4, lr}
 80049f6:	681c      	ldr	r4, [r3, #0]
 80049f8:	b124      	cbz	r4, 8004a04 <iprintf+0x14>
 80049fa:	69a3      	ldr	r3, [r4, #24]
 80049fc:	b913      	cbnz	r3, 8004a04 <iprintf+0x14>
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f866 	bl	8004ad0 <__sinit>
 8004a04:	ab05      	add	r3, sp, #20
 8004a06:	9a04      	ldr	r2, [sp, #16]
 8004a08:	68a1      	ldr	r1, [r4, #8]
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 f9bd 	bl	8004d8c <_vfiprintf_r>
 8004a12:	b002      	add	sp, #8
 8004a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a18:	b004      	add	sp, #16
 8004a1a:	4770      	bx	lr
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <std>:
 8004a20:	2300      	movs	r3, #0
 8004a22:	b510      	push	{r4, lr}
 8004a24:	4604      	mov	r4, r0
 8004a26:	e9c0 3300 	strd	r3, r3, [r0]
 8004a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2e:	6083      	str	r3, [r0, #8]
 8004a30:	8181      	strh	r1, [r0, #12]
 8004a32:	6643      	str	r3, [r0, #100]	; 0x64
 8004a34:	81c2      	strh	r2, [r0, #14]
 8004a36:	6183      	str	r3, [r0, #24]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	305c      	adds	r0, #92	; 0x5c
 8004a3e:	f7ff ffcf 	bl	80049e0 <memset>
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x38>)
 8004a44:	6263      	str	r3, [r4, #36]	; 0x24
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x3c>)
 8004a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x40>)
 8004a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <std+0x44>)
 8004a50:	6224      	str	r4, [r4, #32]
 8004a52:	6323      	str	r3, [r4, #48]	; 0x30
 8004a54:	bd10      	pop	{r4, pc}
 8004a56:	bf00      	nop
 8004a58:	08005335 	.word	0x08005335
 8004a5c:	08005357 	.word	0x08005357
 8004a60:	0800538f 	.word	0x0800538f
 8004a64:	080053b3 	.word	0x080053b3

08004a68 <_cleanup_r>:
 8004a68:	4901      	ldr	r1, [pc, #4]	; (8004a70 <_cleanup_r+0x8>)
 8004a6a:	f000 b8af 	b.w	8004bcc <_fwalk_reent>
 8004a6e:	bf00      	nop
 8004a70:	0800568d 	.word	0x0800568d

08004a74 <__sfmoreglue>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	2268      	movs	r2, #104	; 0x68
 8004a78:	1e4d      	subs	r5, r1, #1
 8004a7a:	4355      	muls	r5, r2
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a82:	f000 f8e5 	bl	8004c50 <_malloc_r>
 8004a86:	4604      	mov	r4, r0
 8004a88:	b140      	cbz	r0, 8004a9c <__sfmoreglue+0x28>
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a90:	300c      	adds	r0, #12
 8004a92:	60a0      	str	r0, [r4, #8]
 8004a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a98:	f7ff ffa2 	bl	80049e0 <memset>
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}

08004aa0 <__sfp_lock_acquire>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sfp_lock_acquire+0x8>)
 8004aa2:	f000 b8b3 	b.w	8004c0c <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000265 	.word	0x20000265

08004aac <__sfp_lock_release>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__sfp_lock_release+0x8>)
 8004aae:	f000 b8ae 	b.w	8004c0e <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000265 	.word	0x20000265

08004ab8 <__sinit_lock_acquire>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	; (8004ac0 <__sinit_lock_acquire+0x8>)
 8004aba:	f000 b8a7 	b.w	8004c0c <__retarget_lock_acquire_recursive>
 8004abe:	bf00      	nop
 8004ac0:	20000266 	.word	0x20000266

08004ac4 <__sinit_lock_release>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	; (8004acc <__sinit_lock_release+0x8>)
 8004ac6:	f000 b8a2 	b.w	8004c0e <__retarget_lock_release_recursive>
 8004aca:	bf00      	nop
 8004acc:	20000266 	.word	0x20000266

08004ad0 <__sinit>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f7ff fff0 	bl	8004ab8 <__sinit_lock_acquire>
 8004ad8:	69a3      	ldr	r3, [r4, #24]
 8004ada:	b11b      	cbz	r3, 8004ae4 <__sinit+0x14>
 8004adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae0:	f7ff bff0 	b.w	8004ac4 <__sinit_lock_release>
 8004ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <__sinit+0x68>)
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <__sinit+0x6c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004af2:	42a3      	cmp	r3, r4
 8004af4:	bf04      	itt	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	61a3      	streq	r3, [r4, #24]
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f820 	bl	8004b40 <__sfp>
 8004b00:	6060      	str	r0, [r4, #4]
 8004b02:	4620      	mov	r0, r4
 8004b04:	f000 f81c 	bl	8004b40 <__sfp>
 8004b08:	60a0      	str	r0, [r4, #8]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 f818 	bl	8004b40 <__sfp>
 8004b10:	2200      	movs	r2, #0
 8004b12:	60e0      	str	r0, [r4, #12]
 8004b14:	2104      	movs	r1, #4
 8004b16:	6860      	ldr	r0, [r4, #4]
 8004b18:	f7ff ff82 	bl	8004a20 <std>
 8004b1c:	68a0      	ldr	r0, [r4, #8]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2109      	movs	r1, #9
 8004b22:	f7ff ff7d 	bl	8004a20 <std>
 8004b26:	68e0      	ldr	r0, [r4, #12]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	2112      	movs	r1, #18
 8004b2c:	f7ff ff78 	bl	8004a20 <std>
 8004b30:	2301      	movs	r3, #1
 8004b32:	61a3      	str	r3, [r4, #24]
 8004b34:	e7d2      	b.n	8004adc <__sinit+0xc>
 8004b36:	bf00      	nop
 8004b38:	0800595c 	.word	0x0800595c
 8004b3c:	08004a69 	.word	0x08004a69

08004b40 <__sfp>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	4607      	mov	r7, r0
 8004b44:	f7ff ffac 	bl	8004aa0 <__sfp_lock_acquire>
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <__sfp+0x84>)
 8004b4a:	681e      	ldr	r6, [r3, #0]
 8004b4c:	69b3      	ldr	r3, [r6, #24]
 8004b4e:	b913      	cbnz	r3, 8004b56 <__sfp+0x16>
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7ff ffbd 	bl	8004ad0 <__sinit>
 8004b56:	3648      	adds	r6, #72	; 0x48
 8004b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	d503      	bpl.n	8004b68 <__sfp+0x28>
 8004b60:	6833      	ldr	r3, [r6, #0]
 8004b62:	b30b      	cbz	r3, 8004ba8 <__sfp+0x68>
 8004b64:	6836      	ldr	r6, [r6, #0]
 8004b66:	e7f7      	b.n	8004b58 <__sfp+0x18>
 8004b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b6c:	b9d5      	cbnz	r5, 8004ba4 <__sfp+0x64>
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <__sfp+0x88>)
 8004b70:	60e3      	str	r3, [r4, #12]
 8004b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b76:	6665      	str	r5, [r4, #100]	; 0x64
 8004b78:	f000 f847 	bl	8004c0a <__retarget_lock_init_recursive>
 8004b7c:	f7ff ff96 	bl	8004aac <__sfp_lock_release>
 8004b80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b88:	6025      	str	r5, [r4, #0]
 8004b8a:	61a5      	str	r5, [r4, #24]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b94:	f7ff ff24 	bl	80049e0 <memset>
 8004b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	3468      	adds	r4, #104	; 0x68
 8004ba6:	e7d9      	b.n	8004b5c <__sfp+0x1c>
 8004ba8:	2104      	movs	r1, #4
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff ff62 	bl	8004a74 <__sfmoreglue>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	6030      	str	r0, [r6, #0]
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d1d5      	bne.n	8004b64 <__sfp+0x24>
 8004bb8:	f7ff ff78 	bl	8004aac <__sfp_lock_release>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	e7ee      	b.n	8004ba0 <__sfp+0x60>
 8004bc2:	bf00      	nop
 8004bc4:	0800595c 	.word	0x0800595c
 8004bc8:	ffff0001 	.word	0xffff0001

08004bcc <_fwalk_reent>:
 8004bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	4688      	mov	r8, r1
 8004bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bd8:	2700      	movs	r7, #0
 8004bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bde:	f1b9 0901 	subs.w	r9, r9, #1
 8004be2:	d505      	bpl.n	8004bf0 <_fwalk_reent+0x24>
 8004be4:	6824      	ldr	r4, [r4, #0]
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	d1f7      	bne.n	8004bda <_fwalk_reent+0xe>
 8004bea:	4638      	mov	r0, r7
 8004bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf0:	89ab      	ldrh	r3, [r5, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d907      	bls.n	8004c06 <_fwalk_reent+0x3a>
 8004bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	d003      	beq.n	8004c06 <_fwalk_reent+0x3a>
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4630      	mov	r0, r6
 8004c02:	47c0      	blx	r8
 8004c04:	4307      	orrs	r7, r0
 8004c06:	3568      	adds	r5, #104	; 0x68
 8004c08:	e7e9      	b.n	8004bde <_fwalk_reent+0x12>

08004c0a <__retarget_lock_init_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__retarget_lock_acquire_recursive>:
 8004c0c:	4770      	bx	lr

08004c0e <__retarget_lock_release_recursive>:
 8004c0e:	4770      	bx	lr

08004c10 <sbrk_aligned>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4e0e      	ldr	r6, [pc, #56]	; (8004c4c <sbrk_aligned+0x3c>)
 8004c14:	460c      	mov	r4, r1
 8004c16:	6831      	ldr	r1, [r6, #0]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	b911      	cbnz	r1, 8004c22 <sbrk_aligned+0x12>
 8004c1c:	f000 fb7a 	bl	8005314 <_sbrk_r>
 8004c20:	6030      	str	r0, [r6, #0]
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 fb75 	bl	8005314 <_sbrk_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d00a      	beq.n	8004c44 <sbrk_aligned+0x34>
 8004c2e:	1cc4      	adds	r4, r0, #3
 8004c30:	f024 0403 	bic.w	r4, r4, #3
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d007      	beq.n	8004c48 <sbrk_aligned+0x38>
 8004c38:	1a21      	subs	r1, r4, r0
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 fb6a 	bl	8005314 <_sbrk_r>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d101      	bne.n	8004c48 <sbrk_aligned+0x38>
 8004c44:	f04f 34ff 	mov.w	r4, #4294967295
 8004c48:	4620      	mov	r0, r4
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	2000026c 	.word	0x2000026c

08004c50 <_malloc_r>:
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	1ccd      	adds	r5, r1, #3
 8004c56:	f025 0503 	bic.w	r5, r5, #3
 8004c5a:	3508      	adds	r5, #8
 8004c5c:	2d0c      	cmp	r5, #12
 8004c5e:	bf38      	it	cc
 8004c60:	250c      	movcc	r5, #12
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	4607      	mov	r7, r0
 8004c66:	db01      	blt.n	8004c6c <_malloc_r+0x1c>
 8004c68:	42a9      	cmp	r1, r5
 8004c6a:	d905      	bls.n	8004c78 <_malloc_r+0x28>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	2600      	movs	r6, #0
 8004c72:	4630      	mov	r0, r6
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	4e2e      	ldr	r6, [pc, #184]	; (8004d34 <_malloc_r+0xe4>)
 8004c7a:	f000 fdbb 	bl	80057f4 <__malloc_lock>
 8004c7e:	6833      	ldr	r3, [r6, #0]
 8004c80:	461c      	mov	r4, r3
 8004c82:	bb34      	cbnz	r4, 8004cd2 <_malloc_r+0x82>
 8004c84:	4629      	mov	r1, r5
 8004c86:	4638      	mov	r0, r7
 8004c88:	f7ff ffc2 	bl	8004c10 <sbrk_aligned>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	4604      	mov	r4, r0
 8004c90:	d14d      	bne.n	8004d2e <_malloc_r+0xde>
 8004c92:	6834      	ldr	r4, [r6, #0]
 8004c94:	4626      	mov	r6, r4
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	d140      	bne.n	8004d1c <_malloc_r+0xcc>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	eb04 0803 	add.w	r8, r4, r3
 8004ca4:	f000 fb36 	bl	8005314 <_sbrk_r>
 8004ca8:	4580      	cmp	r8, r0
 8004caa:	d13a      	bne.n	8004d22 <_malloc_r+0xd2>
 8004cac:	6821      	ldr	r1, [r4, #0]
 8004cae:	3503      	adds	r5, #3
 8004cb0:	1a6d      	subs	r5, r5, r1
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7ff ffa5 	bl	8004c10 <sbrk_aligned>
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d02b      	beq.n	8004d22 <_malloc_r+0xd2>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	442b      	add	r3, r5
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	e00e      	b.n	8004cf0 <_malloc_r+0xa0>
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	1b52      	subs	r2, r2, r5
 8004cd6:	d41e      	bmi.n	8004d16 <_malloc_r+0xc6>
 8004cd8:	2a0b      	cmp	r2, #11
 8004cda:	d916      	bls.n	8004d0a <_malloc_r+0xba>
 8004cdc:	1961      	adds	r1, r4, r5
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	6025      	str	r5, [r4, #0]
 8004ce2:	bf18      	it	ne
 8004ce4:	6059      	strne	r1, [r3, #4]
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	bf08      	it	eq
 8004cea:	6031      	streq	r1, [r6, #0]
 8004cec:	5162      	str	r2, [r4, r5]
 8004cee:	604b      	str	r3, [r1, #4]
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f104 060b 	add.w	r6, r4, #11
 8004cf6:	f000 fd83 	bl	8005800 <__malloc_unlock>
 8004cfa:	f026 0607 	bic.w	r6, r6, #7
 8004cfe:	1d23      	adds	r3, r4, #4
 8004d00:	1af2      	subs	r2, r6, r3
 8004d02:	d0b6      	beq.n	8004c72 <_malloc_r+0x22>
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	50a3      	str	r3, [r4, r2]
 8004d08:	e7b3      	b.n	8004c72 <_malloc_r+0x22>
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	bf0c      	ite	eq
 8004d10:	6032      	streq	r2, [r6, #0]
 8004d12:	605a      	strne	r2, [r3, #4]
 8004d14:	e7ec      	b.n	8004cf0 <_malloc_r+0xa0>
 8004d16:	4623      	mov	r3, r4
 8004d18:	6864      	ldr	r4, [r4, #4]
 8004d1a:	e7b2      	b.n	8004c82 <_malloc_r+0x32>
 8004d1c:	4634      	mov	r4, r6
 8004d1e:	6876      	ldr	r6, [r6, #4]
 8004d20:	e7b9      	b.n	8004c96 <_malloc_r+0x46>
 8004d22:	230c      	movs	r3, #12
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4638      	mov	r0, r7
 8004d28:	f000 fd6a 	bl	8005800 <__malloc_unlock>
 8004d2c:	e7a1      	b.n	8004c72 <_malloc_r+0x22>
 8004d2e:	6025      	str	r5, [r4, #0]
 8004d30:	e7de      	b.n	8004cf0 <_malloc_r+0xa0>
 8004d32:	bf00      	nop
 8004d34:	20000268 	.word	0x20000268

08004d38 <__sfputc_r>:
 8004d38:	6893      	ldr	r3, [r2, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	b410      	push	{r4}
 8004d40:	6093      	str	r3, [r2, #8]
 8004d42:	da08      	bge.n	8004d56 <__sfputc_r+0x1e>
 8004d44:	6994      	ldr	r4, [r2, #24]
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	db01      	blt.n	8004d4e <__sfputc_r+0x16>
 8004d4a:	290a      	cmp	r1, #10
 8004d4c:	d103      	bne.n	8004d56 <__sfputc_r+0x1e>
 8004d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d52:	f000 bb33 	b.w	80053bc <__swbuf_r>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	1c58      	adds	r0, r3, #1
 8004d5a:	6010      	str	r0, [r2, #0]
 8004d5c:	7019      	strb	r1, [r3, #0]
 8004d5e:	4608      	mov	r0, r1
 8004d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <__sfputs_r>:
 8004d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d68:	4606      	mov	r6, r0
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	18d5      	adds	r5, r2, r3
 8004d70:	42ac      	cmp	r4, r5
 8004d72:	d101      	bne.n	8004d78 <__sfputs_r+0x12>
 8004d74:	2000      	movs	r0, #0
 8004d76:	e007      	b.n	8004d88 <__sfputs_r+0x22>
 8004d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7c:	463a      	mov	r2, r7
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7ff ffda 	bl	8004d38 <__sfputc_r>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d1f3      	bne.n	8004d70 <__sfputs_r+0xa>
 8004d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d8c <_vfiprintf_r>:
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	460d      	mov	r5, r1
 8004d92:	b09d      	sub	sp, #116	; 0x74
 8004d94:	4614      	mov	r4, r2
 8004d96:	4698      	mov	r8, r3
 8004d98:	4606      	mov	r6, r0
 8004d9a:	b118      	cbz	r0, 8004da4 <_vfiprintf_r+0x18>
 8004d9c:	6983      	ldr	r3, [r0, #24]
 8004d9e:	b90b      	cbnz	r3, 8004da4 <_vfiprintf_r+0x18>
 8004da0:	f7ff fe96 	bl	8004ad0 <__sinit>
 8004da4:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <_vfiprintf_r+0x240>)
 8004da6:	429d      	cmp	r5, r3
 8004da8:	d11b      	bne.n	8004de2 <_vfiprintf_r+0x56>
 8004daa:	6875      	ldr	r5, [r6, #4]
 8004dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dae:	07d9      	lsls	r1, r3, #31
 8004db0:	d405      	bmi.n	8004dbe <_vfiprintf_r+0x32>
 8004db2:	89ab      	ldrh	r3, [r5, #12]
 8004db4:	059a      	lsls	r2, r3, #22
 8004db6:	d402      	bmi.n	8004dbe <_vfiprintf_r+0x32>
 8004db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dba:	f7ff ff27 	bl	8004c0c <__retarget_lock_acquire_recursive>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	d501      	bpl.n	8004dc8 <_vfiprintf_r+0x3c>
 8004dc4:	692b      	ldr	r3, [r5, #16]
 8004dc6:	b9eb      	cbnz	r3, 8004e04 <_vfiprintf_r+0x78>
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 fb5a 	bl	8005484 <__swsetup_r>
 8004dd0:	b1c0      	cbz	r0, 8004e04 <_vfiprintf_r+0x78>
 8004dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dd4:	07dc      	lsls	r4, r3, #31
 8004dd6:	d50e      	bpl.n	8004df6 <_vfiprintf_r+0x6a>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	b01d      	add	sp, #116	; 0x74
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de2:	4b7b      	ldr	r3, [pc, #492]	; (8004fd0 <_vfiprintf_r+0x244>)
 8004de4:	429d      	cmp	r5, r3
 8004de6:	d101      	bne.n	8004dec <_vfiprintf_r+0x60>
 8004de8:	68b5      	ldr	r5, [r6, #8]
 8004dea:	e7df      	b.n	8004dac <_vfiprintf_r+0x20>
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <_vfiprintf_r+0x248>)
 8004dee:	429d      	cmp	r5, r3
 8004df0:	bf08      	it	eq
 8004df2:	68f5      	ldreq	r5, [r6, #12]
 8004df4:	e7da      	b.n	8004dac <_vfiprintf_r+0x20>
 8004df6:	89ab      	ldrh	r3, [r5, #12]
 8004df8:	0598      	lsls	r0, r3, #22
 8004dfa:	d4ed      	bmi.n	8004dd8 <_vfiprintf_r+0x4c>
 8004dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dfe:	f7ff ff06 	bl	8004c0e <__retarget_lock_release_recursive>
 8004e02:	e7e9      	b.n	8004dd8 <_vfiprintf_r+0x4c>
 8004e04:	2300      	movs	r3, #0
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	2320      	movs	r3, #32
 8004e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e12:	2330      	movs	r3, #48	; 0x30
 8004e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fd8 <_vfiprintf_r+0x24c>
 8004e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e1c:	f04f 0901 	mov.w	r9, #1
 8004e20:	4623      	mov	r3, r4
 8004e22:	469a      	mov	sl, r3
 8004e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e28:	b10a      	cbz	r2, 8004e2e <_vfiprintf_r+0xa2>
 8004e2a:	2a25      	cmp	r2, #37	; 0x25
 8004e2c:	d1f9      	bne.n	8004e22 <_vfiprintf_r+0x96>
 8004e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e32:	d00b      	beq.n	8004e4c <_vfiprintf_r+0xc0>
 8004e34:	465b      	mov	r3, fp
 8004e36:	4622      	mov	r2, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7ff ff93 	bl	8004d66 <__sfputs_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	f000 80aa 	beq.w	8004f9a <_vfiprintf_r+0x20e>
 8004e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e48:	445a      	add	r2, fp
 8004e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a2 	beq.w	8004f9a <_vfiprintf_r+0x20e>
 8004e56:	2300      	movs	r3, #0
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e60:	f10a 0a01 	add.w	sl, sl, #1
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e6e:	4654      	mov	r4, sl
 8004e70:	2205      	movs	r2, #5
 8004e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e76:	4858      	ldr	r0, [pc, #352]	; (8004fd8 <_vfiprintf_r+0x24c>)
 8004e78:	f7fb f9aa 	bl	80001d0 <memchr>
 8004e7c:	9a04      	ldr	r2, [sp, #16]
 8004e7e:	b9d8      	cbnz	r0, 8004eb8 <_vfiprintf_r+0x12c>
 8004e80:	06d1      	lsls	r1, r2, #27
 8004e82:	bf44      	itt	mi
 8004e84:	2320      	movmi	r3, #32
 8004e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e8a:	0713      	lsls	r3, r2, #28
 8004e8c:	bf44      	itt	mi
 8004e8e:	232b      	movmi	r3, #43	; 0x2b
 8004e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e94:	f89a 3000 	ldrb.w	r3, [sl]
 8004e98:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9a:	d015      	beq.n	8004ec8 <_vfiprintf_r+0x13c>
 8004e9c:	9a07      	ldr	r2, [sp, #28]
 8004e9e:	4654      	mov	r4, sl
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f04f 0c0a 	mov.w	ip, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eac:	3b30      	subs	r3, #48	; 0x30
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	d94e      	bls.n	8004f50 <_vfiprintf_r+0x1c4>
 8004eb2:	b1b0      	cbz	r0, 8004ee2 <_vfiprintf_r+0x156>
 8004eb4:	9207      	str	r2, [sp, #28]
 8004eb6:	e014      	b.n	8004ee2 <_vfiprintf_r+0x156>
 8004eb8:	eba0 0308 	sub.w	r3, r0, r8
 8004ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	46a2      	mov	sl, r4
 8004ec6:	e7d2      	b.n	8004e6e <_vfiprintf_r+0xe2>
 8004ec8:	9b03      	ldr	r3, [sp, #12]
 8004eca:	1d19      	adds	r1, r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	9103      	str	r1, [sp, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bfbb      	ittet	lt
 8004ed4:	425b      	neglt	r3, r3
 8004ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eda:	9307      	strge	r3, [sp, #28]
 8004edc:	9307      	strlt	r3, [sp, #28]
 8004ede:	bfb8      	it	lt
 8004ee0:	9204      	strlt	r2, [sp, #16]
 8004ee2:	7823      	ldrb	r3, [r4, #0]
 8004ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ee6:	d10c      	bne.n	8004f02 <_vfiprintf_r+0x176>
 8004ee8:	7863      	ldrb	r3, [r4, #1]
 8004eea:	2b2a      	cmp	r3, #42	; 0x2a
 8004eec:	d135      	bne.n	8004f5a <_vfiprintf_r+0x1ce>
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	9203      	str	r2, [sp, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bfb8      	it	lt
 8004efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004efe:	3402      	adds	r4, #2
 8004f00:	9305      	str	r3, [sp, #20]
 8004f02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fe8 <_vfiprintf_r+0x25c>
 8004f06:	7821      	ldrb	r1, [r4, #0]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	4650      	mov	r0, sl
 8004f0c:	f7fb f960 	bl	80001d0 <memchr>
 8004f10:	b140      	cbz	r0, 8004f24 <_vfiprintf_r+0x198>
 8004f12:	2340      	movs	r3, #64	; 0x40
 8004f14:	eba0 000a 	sub.w	r0, r0, sl
 8004f18:	fa03 f000 	lsl.w	r0, r3, r0
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	4303      	orrs	r3, r0
 8004f20:	3401      	adds	r4, #1
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f28:	482c      	ldr	r0, [pc, #176]	; (8004fdc <_vfiprintf_r+0x250>)
 8004f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f2e:	2206      	movs	r2, #6
 8004f30:	f7fb f94e 	bl	80001d0 <memchr>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d03f      	beq.n	8004fb8 <_vfiprintf_r+0x22c>
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <_vfiprintf_r+0x254>)
 8004f3a:	bb1b      	cbnz	r3, 8004f84 <_vfiprintf_r+0x1f8>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	3307      	adds	r3, #7
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	3308      	adds	r3, #8
 8004f46:	9303      	str	r3, [sp, #12]
 8004f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4a:	443b      	add	r3, r7
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	e767      	b.n	8004e20 <_vfiprintf_r+0x94>
 8004f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f54:	460c      	mov	r4, r1
 8004f56:	2001      	movs	r0, #1
 8004f58:	e7a5      	b.n	8004ea6 <_vfiprintf_r+0x11a>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	3401      	adds	r4, #1
 8004f5e:	9305      	str	r3, [sp, #20]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4620      	mov	r0, r4
 8004f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f6c:	3a30      	subs	r2, #48	; 0x30
 8004f6e:	2a09      	cmp	r2, #9
 8004f70:	d903      	bls.n	8004f7a <_vfiprintf_r+0x1ee>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0c5      	beq.n	8004f02 <_vfiprintf_r+0x176>
 8004f76:	9105      	str	r1, [sp, #20]
 8004f78:	e7c3      	b.n	8004f02 <_vfiprintf_r+0x176>
 8004f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f7e:	4604      	mov	r4, r0
 8004f80:	2301      	movs	r3, #1
 8004f82:	e7f0      	b.n	8004f66 <_vfiprintf_r+0x1da>
 8004f84:	ab03      	add	r3, sp, #12
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	462a      	mov	r2, r5
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <_vfiprintf_r+0x258>)
 8004f8c:	a904      	add	r1, sp, #16
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f3af 8000 	nop.w
 8004f94:	4607      	mov	r7, r0
 8004f96:	1c78      	adds	r0, r7, #1
 8004f98:	d1d6      	bne.n	8004f48 <_vfiprintf_r+0x1bc>
 8004f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f9c:	07d9      	lsls	r1, r3, #31
 8004f9e:	d405      	bmi.n	8004fac <_vfiprintf_r+0x220>
 8004fa0:	89ab      	ldrh	r3, [r5, #12]
 8004fa2:	059a      	lsls	r2, r3, #22
 8004fa4:	d402      	bmi.n	8004fac <_vfiprintf_r+0x220>
 8004fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fa8:	f7ff fe31 	bl	8004c0e <__retarget_lock_release_recursive>
 8004fac:	89ab      	ldrh	r3, [r5, #12]
 8004fae:	065b      	lsls	r3, r3, #25
 8004fb0:	f53f af12 	bmi.w	8004dd8 <_vfiprintf_r+0x4c>
 8004fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fb6:	e711      	b.n	8004ddc <_vfiprintf_r+0x50>
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <_vfiprintf_r+0x258>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f000 f880 	bl	80050c8 <_printf_i>
 8004fc8:	e7e4      	b.n	8004f94 <_vfiprintf_r+0x208>
 8004fca:	bf00      	nop
 8004fcc:	08005980 	.word	0x08005980
 8004fd0:	080059a0 	.word	0x080059a0
 8004fd4:	08005960 	.word	0x08005960
 8004fd8:	080059c0 	.word	0x080059c0
 8004fdc:	080059ca 	.word	0x080059ca
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	08004d67 	.word	0x08004d67
 8004fe8:	080059c6 	.word	0x080059c6

08004fec <_printf_common>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	4699      	mov	r9, r3
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	bfb8      	it	lt
 8005000:	4613      	movlt	r3, r2
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005008:	4607      	mov	r7, r0
 800500a:	460c      	mov	r4, r1
 800500c:	b10a      	cbz	r2, 8005012 <_printf_common+0x26>
 800500e:	3301      	adds	r3, #1
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	0699      	lsls	r1, r3, #26
 8005016:	bf42      	ittt	mi
 8005018:	6833      	ldrmi	r3, [r6, #0]
 800501a:	3302      	addmi	r3, #2
 800501c:	6033      	strmi	r3, [r6, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	f015 0506 	ands.w	r5, r5, #6
 8005024:	d106      	bne.n	8005034 <_printf_common+0x48>
 8005026:	f104 0a19 	add.w	sl, r4, #25
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	6832      	ldr	r2, [r6, #0]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	42ab      	cmp	r3, r5
 8005032:	dc26      	bgt.n	8005082 <_printf_common+0x96>
 8005034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005038:	1e13      	subs	r3, r2, #0
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	bf18      	it	ne
 800503e:	2301      	movne	r3, #1
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d42b      	bmi.n	800509c <_printf_common+0xb0>
 8005044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005048:	4649      	mov	r1, r9
 800504a:	4638      	mov	r0, r7
 800504c:	47c0      	blx	r8
 800504e:	3001      	adds	r0, #1
 8005050:	d01e      	beq.n	8005090 <_printf_common+0xa4>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	68e5      	ldr	r5, [r4, #12]
 8005056:	6832      	ldr	r2, [r6, #0]
 8005058:	f003 0306 	and.w	r3, r3, #6
 800505c:	2b04      	cmp	r3, #4
 800505e:	bf08      	it	eq
 8005060:	1aad      	subeq	r5, r5, r2
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	bf0c      	ite	eq
 8005068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800506c:	2500      	movne	r5, #0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfc4      	itt	gt
 8005072:	1a9b      	subgt	r3, r3, r2
 8005074:	18ed      	addgt	r5, r5, r3
 8005076:	2600      	movs	r6, #0
 8005078:	341a      	adds	r4, #26
 800507a:	42b5      	cmp	r5, r6
 800507c:	d11a      	bne.n	80050b4 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e008      	b.n	8005094 <_printf_common+0xa8>
 8005082:	2301      	movs	r3, #1
 8005084:	4652      	mov	r2, sl
 8005086:	4649      	mov	r1, r9
 8005088:	4638      	mov	r0, r7
 800508a:	47c0      	blx	r8
 800508c:	3001      	adds	r0, #1
 800508e:	d103      	bne.n	8005098 <_printf_common+0xac>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	3501      	adds	r5, #1
 800509a:	e7c6      	b.n	800502a <_printf_common+0x3e>
 800509c:	18e1      	adds	r1, r4, r3
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	2030      	movs	r0, #48	; 0x30
 80050a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050a6:	4422      	add	r2, r4
 80050a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b0:	3302      	adds	r3, #2
 80050b2:	e7c7      	b.n	8005044 <_printf_common+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4622      	mov	r2, r4
 80050b8:	4649      	mov	r1, r9
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d0e6      	beq.n	8005090 <_printf_common+0xa4>
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7d9      	b.n	800507a <_printf_common+0x8e>
	...

080050c8 <_printf_i>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	7e0f      	ldrb	r7, [r1, #24]
 80050ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050d0:	2f78      	cmp	r7, #120	; 0x78
 80050d2:	4691      	mov	r9, r2
 80050d4:	4680      	mov	r8, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	469a      	mov	sl, r3
 80050da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050de:	d807      	bhi.n	80050f0 <_printf_i+0x28>
 80050e0:	2f62      	cmp	r7, #98	; 0x62
 80050e2:	d80a      	bhi.n	80050fa <_printf_i+0x32>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	f000 80d8 	beq.w	800529a <_printf_i+0x1d2>
 80050ea:	2f58      	cmp	r7, #88	; 0x58
 80050ec:	f000 80a3 	beq.w	8005236 <_printf_i+0x16e>
 80050f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050f8:	e03a      	b.n	8005170 <_printf_i+0xa8>
 80050fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050fe:	2b15      	cmp	r3, #21
 8005100:	d8f6      	bhi.n	80050f0 <_printf_i+0x28>
 8005102:	a101      	add	r1, pc, #4	; (adr r1, 8005108 <_printf_i+0x40>)
 8005104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005108:	08005161 	.word	0x08005161
 800510c:	08005175 	.word	0x08005175
 8005110:	080050f1 	.word	0x080050f1
 8005114:	080050f1 	.word	0x080050f1
 8005118:	080050f1 	.word	0x080050f1
 800511c:	080050f1 	.word	0x080050f1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050f1 	.word	0x080050f1
 8005128:	080050f1 	.word	0x080050f1
 800512c:	080050f1 	.word	0x080050f1
 8005130:	080050f1 	.word	0x080050f1
 8005134:	08005281 	.word	0x08005281
 8005138:	080051a5 	.word	0x080051a5
 800513c:	08005263 	.word	0x08005263
 8005140:	080050f1 	.word	0x080050f1
 8005144:	080050f1 	.word	0x080050f1
 8005148:	080052a3 	.word	0x080052a3
 800514c:	080050f1 	.word	0x080050f1
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080050f1 	.word	0x080050f1
 8005158:	080050f1 	.word	0x080050f1
 800515c:	0800526b 	.word	0x0800526b
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e0a3      	b.n	80052bc <_printf_i+0x1f4>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	6829      	ldr	r1, [r5, #0]
 8005178:	0606      	lsls	r6, r0, #24
 800517a:	f101 0304 	add.w	r3, r1, #4
 800517e:	d50a      	bpl.n	8005196 <_printf_i+0xce>
 8005180:	680e      	ldr	r6, [r1, #0]
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	2e00      	cmp	r6, #0
 8005186:	da03      	bge.n	8005190 <_printf_i+0xc8>
 8005188:	232d      	movs	r3, #45	; 0x2d
 800518a:	4276      	negs	r6, r6
 800518c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005190:	485e      	ldr	r0, [pc, #376]	; (800530c <_printf_i+0x244>)
 8005192:	230a      	movs	r3, #10
 8005194:	e019      	b.n	80051ca <_printf_i+0x102>
 8005196:	680e      	ldr	r6, [r1, #0]
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800519e:	bf18      	it	ne
 80051a0:	b236      	sxthne	r6, r6
 80051a2:	e7ef      	b.n	8005184 <_printf_i+0xbc>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	1d19      	adds	r1, r3, #4
 80051aa:	6029      	str	r1, [r5, #0]
 80051ac:	0601      	lsls	r1, r0, #24
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0xec>
 80051b0:	681e      	ldr	r6, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0xf2>
 80051b4:	0646      	lsls	r6, r0, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0xe8>
 80051b8:	881e      	ldrh	r6, [r3, #0]
 80051ba:	4854      	ldr	r0, [pc, #336]	; (800530c <_printf_i+0x244>)
 80051bc:	2f6f      	cmp	r7, #111	; 0x6f
 80051be:	bf0c      	ite	eq
 80051c0:	2308      	moveq	r3, #8
 80051c2:	230a      	movne	r3, #10
 80051c4:	2100      	movs	r1, #0
 80051c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ca:	6865      	ldr	r5, [r4, #4]
 80051cc:	60a5      	str	r5, [r4, #8]
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	bfa2      	ittt	ge
 80051d2:	6821      	ldrge	r1, [r4, #0]
 80051d4:	f021 0104 	bicge.w	r1, r1, #4
 80051d8:	6021      	strge	r1, [r4, #0]
 80051da:	b90e      	cbnz	r6, 80051e0 <_printf_i+0x118>
 80051dc:	2d00      	cmp	r5, #0
 80051de:	d04d      	beq.n	800527c <_printf_i+0x1b4>
 80051e0:	4615      	mov	r5, r2
 80051e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051e6:	fb03 6711 	mls	r7, r3, r1, r6
 80051ea:	5dc7      	ldrb	r7, [r0, r7]
 80051ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051f0:	4637      	mov	r7, r6
 80051f2:	42bb      	cmp	r3, r7
 80051f4:	460e      	mov	r6, r1
 80051f6:	d9f4      	bls.n	80051e2 <_printf_i+0x11a>
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d10b      	bne.n	8005214 <_printf_i+0x14c>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	07de      	lsls	r6, r3, #31
 8005200:	d508      	bpl.n	8005214 <_printf_i+0x14c>
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	6861      	ldr	r1, [r4, #4]
 8005206:	4299      	cmp	r1, r3
 8005208:	bfde      	ittt	le
 800520a:	2330      	movle	r3, #48	; 0x30
 800520c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005214:	1b52      	subs	r2, r2, r5
 8005216:	6122      	str	r2, [r4, #16]
 8005218:	f8cd a000 	str.w	sl, [sp]
 800521c:	464b      	mov	r3, r9
 800521e:	aa03      	add	r2, sp, #12
 8005220:	4621      	mov	r1, r4
 8005222:	4640      	mov	r0, r8
 8005224:	f7ff fee2 	bl	8004fec <_printf_common>
 8005228:	3001      	adds	r0, #1
 800522a:	d14c      	bne.n	80052c6 <_printf_i+0x1fe>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	b004      	add	sp, #16
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	4835      	ldr	r0, [pc, #212]	; (800530c <_printf_i+0x244>)
 8005238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800523c:	6829      	ldr	r1, [r5, #0]
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	f851 6b04 	ldr.w	r6, [r1], #4
 8005244:	6029      	str	r1, [r5, #0]
 8005246:	061d      	lsls	r5, r3, #24
 8005248:	d514      	bpl.n	8005274 <_printf_i+0x1ac>
 800524a:	07df      	lsls	r7, r3, #31
 800524c:	bf44      	itt	mi
 800524e:	f043 0320 	orrmi.w	r3, r3, #32
 8005252:	6023      	strmi	r3, [r4, #0]
 8005254:	b91e      	cbnz	r6, 800525e <_printf_i+0x196>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	f023 0320 	bic.w	r3, r3, #32
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	2310      	movs	r3, #16
 8005260:	e7b0      	b.n	80051c4 <_printf_i+0xfc>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f043 0320 	orr.w	r3, r3, #32
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	2378      	movs	r3, #120	; 0x78
 800526c:	4828      	ldr	r0, [pc, #160]	; (8005310 <_printf_i+0x248>)
 800526e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005272:	e7e3      	b.n	800523c <_printf_i+0x174>
 8005274:	0659      	lsls	r1, r3, #25
 8005276:	bf48      	it	mi
 8005278:	b2b6      	uxthmi	r6, r6
 800527a:	e7e6      	b.n	800524a <_printf_i+0x182>
 800527c:	4615      	mov	r5, r2
 800527e:	e7bb      	b.n	80051f8 <_printf_i+0x130>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	6826      	ldr	r6, [r4, #0]
 8005284:	6961      	ldr	r1, [r4, #20]
 8005286:	1d18      	adds	r0, r3, #4
 8005288:	6028      	str	r0, [r5, #0]
 800528a:	0635      	lsls	r5, r6, #24
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	d501      	bpl.n	8005294 <_printf_i+0x1cc>
 8005290:	6019      	str	r1, [r3, #0]
 8005292:	e002      	b.n	800529a <_printf_i+0x1d2>
 8005294:	0670      	lsls	r0, r6, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0x1c8>
 8005298:	8019      	strh	r1, [r3, #0]
 800529a:	2300      	movs	r3, #0
 800529c:	6123      	str	r3, [r4, #16]
 800529e:	4615      	mov	r5, r2
 80052a0:	e7ba      	b.n	8005218 <_printf_i+0x150>
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	602a      	str	r2, [r5, #0]
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	4628      	mov	r0, r5
 80052b0:	f7fa ff8e 	bl	80001d0 <memchr>
 80052b4:	b108      	cbz	r0, 80052ba <_printf_i+0x1f2>
 80052b6:	1b40      	subs	r0, r0, r5
 80052b8:	6060      	str	r0, [r4, #4]
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	2300      	movs	r3, #0
 80052c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c4:	e7a8      	b.n	8005218 <_printf_i+0x150>
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4649      	mov	r1, r9
 80052cc:	4640      	mov	r0, r8
 80052ce:	47d0      	blx	sl
 80052d0:	3001      	adds	r0, #1
 80052d2:	d0ab      	beq.n	800522c <_printf_i+0x164>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	079b      	lsls	r3, r3, #30
 80052d8:	d413      	bmi.n	8005302 <_printf_i+0x23a>
 80052da:	68e0      	ldr	r0, [r4, #12]
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	4298      	cmp	r0, r3
 80052e0:	bfb8      	it	lt
 80052e2:	4618      	movlt	r0, r3
 80052e4:	e7a4      	b.n	8005230 <_printf_i+0x168>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4632      	mov	r2, r6
 80052ea:	4649      	mov	r1, r9
 80052ec:	4640      	mov	r0, r8
 80052ee:	47d0      	blx	sl
 80052f0:	3001      	adds	r0, #1
 80052f2:	d09b      	beq.n	800522c <_printf_i+0x164>
 80052f4:	3501      	adds	r5, #1
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	9903      	ldr	r1, [sp, #12]
 80052fa:	1a5b      	subs	r3, r3, r1
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dcf2      	bgt.n	80052e6 <_printf_i+0x21e>
 8005300:	e7eb      	b.n	80052da <_printf_i+0x212>
 8005302:	2500      	movs	r5, #0
 8005304:	f104 0619 	add.w	r6, r4, #25
 8005308:	e7f5      	b.n	80052f6 <_printf_i+0x22e>
 800530a:	bf00      	nop
 800530c:	080059d1 	.word	0x080059d1
 8005310:	080059e2 	.word	0x080059e2

08005314 <_sbrk_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_sbrk_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fc fd9e 	bl	8001e60 <_sbrk>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_sbrk_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_sbrk_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000270 	.word	0x20000270

08005334 <__sread>:
 8005334:	b510      	push	{r4, lr}
 8005336:	460c      	mov	r4, r1
 8005338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533c:	f000 fab2 	bl	80058a4 <_read_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	bfab      	itete	ge
 8005344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005346:	89a3      	ldrhlt	r3, [r4, #12]
 8005348:	181b      	addge	r3, r3, r0
 800534a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800534e:	bfac      	ite	ge
 8005350:	6563      	strge	r3, [r4, #84]	; 0x54
 8005352:	81a3      	strhlt	r3, [r4, #12]
 8005354:	bd10      	pop	{r4, pc}

08005356 <__swrite>:
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	461f      	mov	r7, r3
 800535c:	898b      	ldrh	r3, [r1, #12]
 800535e:	05db      	lsls	r3, r3, #23
 8005360:	4605      	mov	r5, r0
 8005362:	460c      	mov	r4, r1
 8005364:	4616      	mov	r6, r2
 8005366:	d505      	bpl.n	8005374 <__swrite+0x1e>
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	2302      	movs	r3, #2
 800536e:	2200      	movs	r2, #0
 8005370:	f000 f9c8 	bl	8005704 <_lseek_r>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	4632      	mov	r2, r6
 8005382:	463b      	mov	r3, r7
 8005384:	4628      	mov	r0, r5
 8005386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	f000 b869 	b.w	8005460 <_write_r>

0800538e <__sseek>:
 800538e:	b510      	push	{r4, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	f000 f9b5 	bl	8005704 <_lseek_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	bf15      	itete	ne
 80053a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053aa:	81a3      	strheq	r3, [r4, #12]
 80053ac:	bf18      	it	ne
 80053ae:	81a3      	strhne	r3, [r4, #12]
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <__sclose>:
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 b8d3 	b.w	8005560 <_close_r>
	...

080053bc <__swbuf_r>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	460e      	mov	r6, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	4605      	mov	r5, r0
 80053c4:	b118      	cbz	r0, 80053ce <__swbuf_r+0x12>
 80053c6:	6983      	ldr	r3, [r0, #24]
 80053c8:	b90b      	cbnz	r3, 80053ce <__swbuf_r+0x12>
 80053ca:	f7ff fb81 	bl	8004ad0 <__sinit>
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <__swbuf_r+0x98>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	d12b      	bne.n	800542c <__swbuf_r+0x70>
 80053d4:	686c      	ldr	r4, [r5, #4]
 80053d6:	69a3      	ldr	r3, [r4, #24]
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	071a      	lsls	r2, r3, #28
 80053de:	d52f      	bpl.n	8005440 <__swbuf_r+0x84>
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	b36b      	cbz	r3, 8005440 <__swbuf_r+0x84>
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	1ac0      	subs	r0, r0, r3
 80053ea:	6963      	ldr	r3, [r4, #20]
 80053ec:	b2f6      	uxtb	r6, r6
 80053ee:	4283      	cmp	r3, r0
 80053f0:	4637      	mov	r7, r6
 80053f2:	dc04      	bgt.n	80053fe <__swbuf_r+0x42>
 80053f4:	4621      	mov	r1, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f948 	bl	800568c <_fflush_r>
 80053fc:	bb30      	cbnz	r0, 800544c <__swbuf_r+0x90>
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	3b01      	subs	r3, #1
 8005402:	60a3      	str	r3, [r4, #8]
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	6022      	str	r2, [r4, #0]
 800540a:	701e      	strb	r6, [r3, #0]
 800540c:	6963      	ldr	r3, [r4, #20]
 800540e:	3001      	adds	r0, #1
 8005410:	4283      	cmp	r3, r0
 8005412:	d004      	beq.n	800541e <__swbuf_r+0x62>
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	07db      	lsls	r3, r3, #31
 8005418:	d506      	bpl.n	8005428 <__swbuf_r+0x6c>
 800541a:	2e0a      	cmp	r6, #10
 800541c:	d104      	bne.n	8005428 <__swbuf_r+0x6c>
 800541e:	4621      	mov	r1, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f933 	bl	800568c <_fflush_r>
 8005426:	b988      	cbnz	r0, 800544c <__swbuf_r+0x90>
 8005428:	4638      	mov	r0, r7
 800542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <__swbuf_r+0x9c>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d101      	bne.n	8005436 <__swbuf_r+0x7a>
 8005432:	68ac      	ldr	r4, [r5, #8]
 8005434:	e7cf      	b.n	80053d6 <__swbuf_r+0x1a>
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <__swbuf_r+0xa0>)
 8005438:	429c      	cmp	r4, r3
 800543a:	bf08      	it	eq
 800543c:	68ec      	ldreq	r4, [r5, #12]
 800543e:	e7ca      	b.n	80053d6 <__swbuf_r+0x1a>
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f81e 	bl	8005484 <__swsetup_r>
 8005448:	2800      	cmp	r0, #0
 800544a:	d0cb      	beq.n	80053e4 <__swbuf_r+0x28>
 800544c:	f04f 37ff 	mov.w	r7, #4294967295
 8005450:	e7ea      	b.n	8005428 <__swbuf_r+0x6c>
 8005452:	bf00      	nop
 8005454:	08005980 	.word	0x08005980
 8005458:	080059a0 	.word	0x080059a0
 800545c:	08005960 	.word	0x08005960

08005460 <_write_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <_write_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fc fca5 	bl	8001dbe <_write>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_write_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_write_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000270 	.word	0x20000270

08005484 <__swsetup_r>:
 8005484:	4b32      	ldr	r3, [pc, #200]	; (8005550 <__swsetup_r+0xcc>)
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	681d      	ldr	r5, [r3, #0]
 800548a:	4606      	mov	r6, r0
 800548c:	460c      	mov	r4, r1
 800548e:	b125      	cbz	r5, 800549a <__swsetup_r+0x16>
 8005490:	69ab      	ldr	r3, [r5, #24]
 8005492:	b913      	cbnz	r3, 800549a <__swsetup_r+0x16>
 8005494:	4628      	mov	r0, r5
 8005496:	f7ff fb1b 	bl	8004ad0 <__sinit>
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <__swsetup_r+0xd0>)
 800549c:	429c      	cmp	r4, r3
 800549e:	d10f      	bne.n	80054c0 <__swsetup_r+0x3c>
 80054a0:	686c      	ldr	r4, [r5, #4]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d42c      	bmi.n	8005506 <__swsetup_r+0x82>
 80054ac:	06dd      	lsls	r5, r3, #27
 80054ae:	d411      	bmi.n	80054d4 <__swsetup_r+0x50>
 80054b0:	2309      	movs	r3, #9
 80054b2:	6033      	str	r3, [r6, #0]
 80054b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	e03e      	b.n	800553e <__swsetup_r+0xba>
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <__swsetup_r+0xd4>)
 80054c2:	429c      	cmp	r4, r3
 80054c4:	d101      	bne.n	80054ca <__swsetup_r+0x46>
 80054c6:	68ac      	ldr	r4, [r5, #8]
 80054c8:	e7eb      	b.n	80054a2 <__swsetup_r+0x1e>
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <__swsetup_r+0xd8>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	bf08      	it	eq
 80054d0:	68ec      	ldreq	r4, [r5, #12]
 80054d2:	e7e6      	b.n	80054a2 <__swsetup_r+0x1e>
 80054d4:	0758      	lsls	r0, r3, #29
 80054d6:	d512      	bpl.n	80054fe <__swsetup_r+0x7a>
 80054d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054da:	b141      	cbz	r1, 80054ee <__swsetup_r+0x6a>
 80054dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e0:	4299      	cmp	r1, r3
 80054e2:	d002      	beq.n	80054ea <__swsetup_r+0x66>
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 f991 	bl	800580c <_free_r>
 80054ea:	2300      	movs	r3, #0
 80054ec:	6363      	str	r3, [r4, #52]	; 0x34
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054f4:	81a3      	strh	r3, [r4, #12]
 80054f6:	2300      	movs	r3, #0
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f043 0308 	orr.w	r3, r3, #8
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	b94b      	cbnz	r3, 800551e <__swsetup_r+0x9a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005514:	d003      	beq.n	800551e <__swsetup_r+0x9a>
 8005516:	4621      	mov	r1, r4
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f92b 	bl	8005774 <__smakebuf_r>
 800551e:	89a0      	ldrh	r0, [r4, #12]
 8005520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005524:	f010 0301 	ands.w	r3, r0, #1
 8005528:	d00a      	beq.n	8005540 <__swsetup_r+0xbc>
 800552a:	2300      	movs	r3, #0
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	6963      	ldr	r3, [r4, #20]
 8005530:	425b      	negs	r3, r3
 8005532:	61a3      	str	r3, [r4, #24]
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	b943      	cbnz	r3, 800554a <__swsetup_r+0xc6>
 8005538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800553c:	d1ba      	bne.n	80054b4 <__swsetup_r+0x30>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	0781      	lsls	r1, r0, #30
 8005542:	bf58      	it	pl
 8005544:	6963      	ldrpl	r3, [r4, #20]
 8005546:	60a3      	str	r3, [r4, #8]
 8005548:	e7f4      	b.n	8005534 <__swsetup_r+0xb0>
 800554a:	2000      	movs	r0, #0
 800554c:	e7f7      	b.n	800553e <__swsetup_r+0xba>
 800554e:	bf00      	nop
 8005550:	2000000c 	.word	0x2000000c
 8005554:	08005980 	.word	0x08005980
 8005558:	080059a0 	.word	0x080059a0
 800555c:	08005960 	.word	0x08005960

08005560 <_close_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	; (800557c <_close_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fc fc43 	bl	8001df6 <_close>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_close_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_close_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000270 	.word	0x20000270

08005580 <__sflush_r>:
 8005580:	898a      	ldrh	r2, [r1, #12]
 8005582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005586:	4605      	mov	r5, r0
 8005588:	0710      	lsls	r0, r2, #28
 800558a:	460c      	mov	r4, r1
 800558c:	d458      	bmi.n	8005640 <__sflush_r+0xc0>
 800558e:	684b      	ldr	r3, [r1, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	dc05      	bgt.n	80055a0 <__sflush_r+0x20>
 8005594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	dc02      	bgt.n	80055a0 <__sflush_r+0x20>
 800559a:	2000      	movs	r0, #0
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	d0f9      	beq.n	800559a <__sflush_r+0x1a>
 80055a6:	2300      	movs	r3, #0
 80055a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055ac:	682f      	ldr	r7, [r5, #0]
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	d032      	beq.n	8005618 <__sflush_r+0x98>
 80055b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	075a      	lsls	r2, r3, #29
 80055b8:	d505      	bpl.n	80055c6 <__sflush_r+0x46>
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	1ac0      	subs	r0, r0, r3
 80055be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055c0:	b10b      	cbz	r3, 80055c6 <__sflush_r+0x46>
 80055c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055c4:	1ac0      	subs	r0, r0, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	4602      	mov	r2, r0
 80055ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055cc:	6a21      	ldr	r1, [r4, #32]
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b0      	blx	r6
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	d106      	bne.n	80055e6 <__sflush_r+0x66>
 80055d8:	6829      	ldr	r1, [r5, #0]
 80055da:	291d      	cmp	r1, #29
 80055dc:	d82c      	bhi.n	8005638 <__sflush_r+0xb8>
 80055de:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <__sflush_r+0x108>)
 80055e0:	40ca      	lsrs	r2, r1
 80055e2:	07d6      	lsls	r6, r2, #31
 80055e4:	d528      	bpl.n	8005638 <__sflush_r+0xb8>
 80055e6:	2200      	movs	r2, #0
 80055e8:	6062      	str	r2, [r4, #4]
 80055ea:	04d9      	lsls	r1, r3, #19
 80055ec:	6922      	ldr	r2, [r4, #16]
 80055ee:	6022      	str	r2, [r4, #0]
 80055f0:	d504      	bpl.n	80055fc <__sflush_r+0x7c>
 80055f2:	1c42      	adds	r2, r0, #1
 80055f4:	d101      	bne.n	80055fa <__sflush_r+0x7a>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	b903      	cbnz	r3, 80055fc <__sflush_r+0x7c>
 80055fa:	6560      	str	r0, [r4, #84]	; 0x54
 80055fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055fe:	602f      	str	r7, [r5, #0]
 8005600:	2900      	cmp	r1, #0
 8005602:	d0ca      	beq.n	800559a <__sflush_r+0x1a>
 8005604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005608:	4299      	cmp	r1, r3
 800560a:	d002      	beq.n	8005612 <__sflush_r+0x92>
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f8fd 	bl	800580c <_free_r>
 8005612:	2000      	movs	r0, #0
 8005614:	6360      	str	r0, [r4, #52]	; 0x34
 8005616:	e7c1      	b.n	800559c <__sflush_r+0x1c>
 8005618:	6a21      	ldr	r1, [r4, #32]
 800561a:	2301      	movs	r3, #1
 800561c:	4628      	mov	r0, r5
 800561e:	47b0      	blx	r6
 8005620:	1c41      	adds	r1, r0, #1
 8005622:	d1c7      	bne.n	80055b4 <__sflush_r+0x34>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0c4      	beq.n	80055b4 <__sflush_r+0x34>
 800562a:	2b1d      	cmp	r3, #29
 800562c:	d001      	beq.n	8005632 <__sflush_r+0xb2>
 800562e:	2b16      	cmp	r3, #22
 8005630:	d101      	bne.n	8005636 <__sflush_r+0xb6>
 8005632:	602f      	str	r7, [r5, #0]
 8005634:	e7b1      	b.n	800559a <__sflush_r+0x1a>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	e7ad      	b.n	800559c <__sflush_r+0x1c>
 8005640:	690f      	ldr	r7, [r1, #16]
 8005642:	2f00      	cmp	r7, #0
 8005644:	d0a9      	beq.n	800559a <__sflush_r+0x1a>
 8005646:	0793      	lsls	r3, r2, #30
 8005648:	680e      	ldr	r6, [r1, #0]
 800564a:	bf08      	it	eq
 800564c:	694b      	ldreq	r3, [r1, #20]
 800564e:	600f      	str	r7, [r1, #0]
 8005650:	bf18      	it	ne
 8005652:	2300      	movne	r3, #0
 8005654:	eba6 0807 	sub.w	r8, r6, r7
 8005658:	608b      	str	r3, [r1, #8]
 800565a:	f1b8 0f00 	cmp.w	r8, #0
 800565e:	dd9c      	ble.n	800559a <__sflush_r+0x1a>
 8005660:	6a21      	ldr	r1, [r4, #32]
 8005662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005664:	4643      	mov	r3, r8
 8005666:	463a      	mov	r2, r7
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	2800      	cmp	r0, #0
 800566e:	dc06      	bgt.n	800567e <__sflush_r+0xfe>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	e78e      	b.n	800559c <__sflush_r+0x1c>
 800567e:	4407      	add	r7, r0
 8005680:	eba8 0800 	sub.w	r8, r8, r0
 8005684:	e7e9      	b.n	800565a <__sflush_r+0xda>
 8005686:	bf00      	nop
 8005688:	20400001 	.word	0x20400001

0800568c <_fflush_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	690b      	ldr	r3, [r1, #16]
 8005690:	4605      	mov	r5, r0
 8005692:	460c      	mov	r4, r1
 8005694:	b913      	cbnz	r3, 800569c <_fflush_r+0x10>
 8005696:	2500      	movs	r5, #0
 8005698:	4628      	mov	r0, r5
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	b118      	cbz	r0, 80056a6 <_fflush_r+0x1a>
 800569e:	6983      	ldr	r3, [r0, #24]
 80056a0:	b90b      	cbnz	r3, 80056a6 <_fflush_r+0x1a>
 80056a2:	f7ff fa15 	bl	8004ad0 <__sinit>
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <_fflush_r+0x6c>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	d11b      	bne.n	80056e4 <_fflush_r+0x58>
 80056ac:	686c      	ldr	r4, [r5, #4]
 80056ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ef      	beq.n	8005696 <_fflush_r+0xa>
 80056b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056b8:	07d0      	lsls	r0, r2, #31
 80056ba:	d404      	bmi.n	80056c6 <_fflush_r+0x3a>
 80056bc:	0599      	lsls	r1, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_fflush_r+0x3a>
 80056c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c2:	f7ff faa3 	bl	8004c0c <__retarget_lock_acquire_recursive>
 80056c6:	4628      	mov	r0, r5
 80056c8:	4621      	mov	r1, r4
 80056ca:	f7ff ff59 	bl	8005580 <__sflush_r>
 80056ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056d0:	07da      	lsls	r2, r3, #31
 80056d2:	4605      	mov	r5, r0
 80056d4:	d4e0      	bmi.n	8005698 <_fflush_r+0xc>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	059b      	lsls	r3, r3, #22
 80056da:	d4dd      	bmi.n	8005698 <_fflush_r+0xc>
 80056dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056de:	f7ff fa96 	bl	8004c0e <__retarget_lock_release_recursive>
 80056e2:	e7d9      	b.n	8005698 <_fflush_r+0xc>
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <_fflush_r+0x70>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <_fflush_r+0x62>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7df      	b.n	80056ae <_fflush_r+0x22>
 80056ee:	4b04      	ldr	r3, [pc, #16]	; (8005700 <_fflush_r+0x74>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7da      	b.n	80056ae <_fflush_r+0x22>
 80056f8:	08005980 	.word	0x08005980
 80056fc:	080059a0 	.word	0x080059a0
 8005700:	08005960 	.word	0x08005960

08005704 <_lseek_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d07      	ldr	r5, [pc, #28]	; (8005724 <_lseek_r+0x20>)
 8005708:	4604      	mov	r4, r0
 800570a:	4608      	mov	r0, r1
 800570c:	4611      	mov	r1, r2
 800570e:	2200      	movs	r2, #0
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fc fb96 	bl	8001e44 <_lseek>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_lseek_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_lseek_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000270 	.word	0x20000270

08005728 <__swhatbuf_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	460e      	mov	r6, r1
 800572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005730:	2900      	cmp	r1, #0
 8005732:	b096      	sub	sp, #88	; 0x58
 8005734:	4614      	mov	r4, r2
 8005736:	461d      	mov	r5, r3
 8005738:	da08      	bge.n	800574c <__swhatbuf_r+0x24>
 800573a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	061a      	lsls	r2, r3, #24
 8005744:	d410      	bmi.n	8005768 <__swhatbuf_r+0x40>
 8005746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574a:	e00e      	b.n	800576a <__swhatbuf_r+0x42>
 800574c:	466a      	mov	r2, sp
 800574e:	f000 f8bb 	bl	80058c8 <_fstat_r>
 8005752:	2800      	cmp	r0, #0
 8005754:	dbf1      	blt.n	800573a <__swhatbuf_r+0x12>
 8005756:	9a01      	ldr	r2, [sp, #4]
 8005758:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800575c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005760:	425a      	negs	r2, r3
 8005762:	415a      	adcs	r2, r3
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	e7ee      	b.n	8005746 <__swhatbuf_r+0x1e>
 8005768:	2340      	movs	r3, #64	; 0x40
 800576a:	2000      	movs	r0, #0
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	b016      	add	sp, #88	; 0x58
 8005770:	bd70      	pop	{r4, r5, r6, pc}
	...

08005774 <__smakebuf_r>:
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005778:	079d      	lsls	r5, r3, #30
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	d507      	bpl.n	8005790 <__smakebuf_r+0x1c>
 8005780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	2301      	movs	r3, #1
 800578a:	6163      	str	r3, [r4, #20]
 800578c:	b002      	add	sp, #8
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	ab01      	add	r3, sp, #4
 8005792:	466a      	mov	r2, sp
 8005794:	f7ff ffc8 	bl	8005728 <__swhatbuf_r>
 8005798:	9900      	ldr	r1, [sp, #0]
 800579a:	4605      	mov	r5, r0
 800579c:	4630      	mov	r0, r6
 800579e:	f7ff fa57 	bl	8004c50 <_malloc_r>
 80057a2:	b948      	cbnz	r0, 80057b8 <__smakebuf_r+0x44>
 80057a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a8:	059a      	lsls	r2, r3, #22
 80057aa:	d4ef      	bmi.n	800578c <__smakebuf_r+0x18>
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	e7e3      	b.n	8005780 <__smakebuf_r+0xc>
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <__smakebuf_r+0x7c>)
 80057ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	6020      	str	r0, [r4, #0]
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	6163      	str	r3, [r4, #20]
 80057ca:	9b01      	ldr	r3, [sp, #4]
 80057cc:	6120      	str	r0, [r4, #16]
 80057ce:	b15b      	cbz	r3, 80057e8 <__smakebuf_r+0x74>
 80057d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 f889 	bl	80058ec <_isatty_r>
 80057da:	b128      	cbz	r0, 80057e8 <__smakebuf_r+0x74>
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	81a3      	strh	r3, [r4, #12]
 80057e8:	89a0      	ldrh	r0, [r4, #12]
 80057ea:	4305      	orrs	r5, r0
 80057ec:	81a5      	strh	r5, [r4, #12]
 80057ee:	e7cd      	b.n	800578c <__smakebuf_r+0x18>
 80057f0:	08004a69 	.word	0x08004a69

080057f4 <__malloc_lock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_lock+0x8>)
 80057f6:	f7ff ba09 	b.w	8004c0c <__retarget_lock_acquire_recursive>
 80057fa:	bf00      	nop
 80057fc:	20000264 	.word	0x20000264

08005800 <__malloc_unlock>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__malloc_unlock+0x8>)
 8005802:	f7ff ba04 	b.w	8004c0e <__retarget_lock_release_recursive>
 8005806:	bf00      	nop
 8005808:	20000264 	.word	0x20000264

0800580c <_free_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	2900      	cmp	r1, #0
 8005810:	d044      	beq.n	800589c <_free_r+0x90>
 8005812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005816:	9001      	str	r0, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f1a1 0404 	sub.w	r4, r1, #4
 800581e:	bfb8      	it	lt
 8005820:	18e4      	addlt	r4, r4, r3
 8005822:	f7ff ffe7 	bl	80057f4 <__malloc_lock>
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <_free_r+0x94>)
 8005828:	9801      	ldr	r0, [sp, #4]
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	b933      	cbnz	r3, 800583c <_free_r+0x30>
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6014      	str	r4, [r2, #0]
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005838:	f7ff bfe2 	b.w	8005800 <__malloc_unlock>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d908      	bls.n	8005852 <_free_r+0x46>
 8005840:	6825      	ldr	r5, [r4, #0]
 8005842:	1961      	adds	r1, r4, r5
 8005844:	428b      	cmp	r3, r1
 8005846:	bf01      	itttt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	1949      	addeq	r1, r1, r5
 800584e:	6021      	streq	r1, [r4, #0]
 8005850:	e7ed      	b.n	800582e <_free_r+0x22>
 8005852:	461a      	mov	r2, r3
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b10b      	cbz	r3, 800585c <_free_r+0x50>
 8005858:	42a3      	cmp	r3, r4
 800585a:	d9fa      	bls.n	8005852 <_free_r+0x46>
 800585c:	6811      	ldr	r1, [r2, #0]
 800585e:	1855      	adds	r5, r2, r1
 8005860:	42a5      	cmp	r5, r4
 8005862:	d10b      	bne.n	800587c <_free_r+0x70>
 8005864:	6824      	ldr	r4, [r4, #0]
 8005866:	4421      	add	r1, r4
 8005868:	1854      	adds	r4, r2, r1
 800586a:	42a3      	cmp	r3, r4
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	d1e0      	bne.n	8005832 <_free_r+0x26>
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	6053      	str	r3, [r2, #4]
 8005876:	4421      	add	r1, r4
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	e7da      	b.n	8005832 <_free_r+0x26>
 800587c:	d902      	bls.n	8005884 <_free_r+0x78>
 800587e:	230c      	movs	r3, #12
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	e7d6      	b.n	8005832 <_free_r+0x26>
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	1961      	adds	r1, r4, r5
 8005888:	428b      	cmp	r3, r1
 800588a:	bf04      	itt	eq
 800588c:	6819      	ldreq	r1, [r3, #0]
 800588e:	685b      	ldreq	r3, [r3, #4]
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	bf04      	itt	eq
 8005894:	1949      	addeq	r1, r1, r5
 8005896:	6021      	streq	r1, [r4, #0]
 8005898:	6054      	str	r4, [r2, #4]
 800589a:	e7ca      	b.n	8005832 <_free_r+0x26>
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	20000268 	.word	0x20000268

080058a4 <_read_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_read_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fc fa66 	bl	8001d84 <_read>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_read_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_read_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000270 	.word	0x20000270

080058c8 <_fstat_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	; (80058e8 <_fstat_r+0x20>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f7fc fa9a 	bl	8001e0e <_fstat>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	d102      	bne.n	80058e4 <_fstat_r+0x1c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	b103      	cbz	r3, 80058e4 <_fstat_r+0x1c>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	bf00      	nop
 80058e8:	20000270 	.word	0x20000270

080058ec <_isatty_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_isatty_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fc fa99 	bl	8001e2e <_isatty>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_isatty_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_isatty_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000270 	.word	0x20000270

0800590c <_init>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr

08005918 <_fini>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr
