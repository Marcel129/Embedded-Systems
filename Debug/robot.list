
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003768  08003768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003770  08003770  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097a8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000159b  00000000  00000000  000297e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fafd  00000000  00000000  0002bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a327  00000000  00000000  0004bae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a76  00000000  00000000  00055e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a882  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027bc  00000000  00000000  0011a8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003740 	.word	0x08003740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003740 	.word	0x08003740

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__robot_init>:
	TIM_HandleTypeDef * IRQ_timer;
} robot;

robot mRobot;

void __robot_init(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

	//assign perferials to the struct members
	mRobot.leftWheel->wheelPWMTimer = &htim8;
 80004d0:	4b5e      	ldr	r3, [pc, #376]	; (800064c <__robot_init+0x180>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a5e      	ldr	r2, [pc, #376]	; (8000650 <__robot_init+0x184>)
 80004d6:	601a      	str	r2, [r3, #0]
	mRobot.leftWheel->wheelPWMChannel = TIM_CHANNEL_1;
 80004d8:	4b5c      	ldr	r3, [pc, #368]	; (800064c <__robot_init+0x180>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
	mRobot.leftWheel->dirPort = MOTOR_L_EN_GPIO_Port;
 80004e0:	4b5a      	ldr	r3, [pc, #360]	; (800064c <__robot_init+0x180>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a5b      	ldr	r2, [pc, #364]	; (8000654 <__robot_init+0x188>)
 80004e6:	60da      	str	r2, [r3, #12]
	mRobot.leftWheel->dirPin = MOTOR_L_EN_Pin;
 80004e8:	4b58      	ldr	r3, [pc, #352]	; (800064c <__robot_init+0x180>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f0:	821a      	strh	r2, [r3, #16]
	mRobot.leftWheel->currentSpeed_forPWM = 0;
 80004f2:	4b56      	ldr	r3, [pc, #344]	; (800064c <__robot_init+0x180>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2200      	movs	r2, #0
 80004f8:	721a      	strb	r2, [r3, #8]
	mRobot.leftWheel->settedSpeed_forPWM = 0;
 80004fa:	4b54      	ldr	r3, [pc, #336]	; (800064c <__robot_init+0x180>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2200      	movs	r2, #0
 8000500:	725a      	strb	r2, [r3, #9]
	mRobot.leftWheel->wheelMaxSpeed_forPWM = 99;
 8000502:	4b52      	ldr	r3, [pc, #328]	; (800064c <__robot_init+0x180>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2263      	movs	r2, #99	; 0x63
 8000508:	729a      	strb	r2, [r3, #10]
	mRobot.leftWheel->wheelMinSpeed_forPWM = -99;
 800050a:	4b50      	ldr	r3, [pc, #320]	; (800064c <__robot_init+0x180>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	229d      	movs	r2, #157	; 0x9d
 8000510:	72da      	strb	r2, [r3, #11]

	mRobot.rightWheel->wheelPWMTimer = &htim8;
 8000512:	4b4e      	ldr	r3, [pc, #312]	; (800064c <__robot_init+0x180>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	4a4e      	ldr	r2, [pc, #312]	; (8000650 <__robot_init+0x184>)
 8000518:	601a      	str	r2, [r3, #0]
	mRobot.rightWheel->wheelPWMChannel = TIM_CHANNEL_3;
 800051a:	4b4c      	ldr	r3, [pc, #304]	; (800064c <__robot_init+0x180>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	2208      	movs	r2, #8
 8000520:	605a      	str	r2, [r3, #4]
	mRobot.rightWheel->dirPort = MOTOR_R_EN_GPIO_Port;
 8000522:	4b4a      	ldr	r3, [pc, #296]	; (800064c <__robot_init+0x180>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4a4b      	ldr	r2, [pc, #300]	; (8000654 <__robot_init+0x188>)
 8000528:	60da      	str	r2, [r3, #12]
	mRobot.rightWheel->dirPin = MOTOR_R_EN_Pin;
 800052a:	4b48      	ldr	r3, [pc, #288]	; (800064c <__robot_init+0x180>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2240      	movs	r2, #64	; 0x40
 8000530:	821a      	strh	r2, [r3, #16]
	mRobot.rightWheel->currentSpeed_forPWM = 0;
 8000532:	4b46      	ldr	r3, [pc, #280]	; (800064c <__robot_init+0x180>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	721a      	strb	r2, [r3, #8]
	mRobot.rightWheel->settedSpeed_forPWM = 0;
 800053a:	4b44      	ldr	r3, [pc, #272]	; (800064c <__robot_init+0x180>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	725a      	strb	r2, [r3, #9]
	mRobot.rightWheel->wheelMaxSpeed_forPWM = 99;
 8000542:	4b42      	ldr	r3, [pc, #264]	; (800064c <__robot_init+0x180>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	2263      	movs	r2, #99	; 0x63
 8000548:	729a      	strb	r2, [r3, #10]
	mRobot.rightWheel->wheelMinSpeed_forPWM = -99;
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <__robot_init+0x180>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	229d      	movs	r2, #157	; 0x9d
 8000550:	72da      	strb	r2, [r3, #11]

	mRobot.acceleration_forPWM = 1;
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <__robot_init+0x180>)
 8000554:	2201      	movs	r2, #1
 8000556:	731a      	strb	r2, [r3, #12]
	mRobot.mDir = STOP;
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <__robot_init+0x180>)
 800055a:	2204      	movs	r2, #4
 800055c:	735a      	strb	r2, [r3, #13]

	//default move forward
	HAL_GPIO_WritePin(mRobot.leftWheel->dirPort, mRobot.leftWheel->dirPin, GPIO_PIN_SET);
 800055e:	4b3b      	ldr	r3, [pc, #236]	; (800064c <__robot_init+0x180>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68d8      	ldr	r0, [r3, #12]
 8000564:	4b39      	ldr	r3, [pc, #228]	; (800064c <__robot_init+0x180>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	8a1b      	ldrh	r3, [r3, #16]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f001 fb3b 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mRobot.rightWheel->dirPort, mRobot.rightWheel->dirPin, GPIO_PIN_RESET);
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <__robot_init+0x180>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	68d8      	ldr	r0, [r3, #12]
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <__robot_init+0x180>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	8a1b      	ldrh	r3, [r3, #16]
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	f001 fb31 	bl	8001be8 <HAL_GPIO_WritePin>

	//start PWM
	HAL_TIM_PWM_Start(mRobot.leftWheel->wheelPWMTimer,  mRobot.leftWheel->wheelPWMChannel);
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <__robot_init+0x180>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <__robot_init+0x180>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	4610      	mov	r0, r2
 8000596:	f002 f8d7 	bl	8002748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.rightWheel->wheelPWMTimer,  mRobot.rightWheel->wheelPWMChannel);
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <__robot_init+0x180>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <__robot_init+0x180>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4610      	mov	r0, r2
 80005aa:	f002 f8cd 	bl	8002748 <HAL_TIM_PWM_Start>

	//reset speeds
	__HAL_TIM_SET_COMPARE(mRobot.leftWheel->wheelPWMTimer, mRobot.leftWheel->wheelPWMChannel, 0);
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <__robot_init+0x180>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d106      	bne.n	80005c6 <__robot_init+0xfa>
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <__robot_init+0x180>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	635a      	str	r2, [r3, #52]	; 0x34
 80005c4:	e01d      	b.n	8000602 <__robot_init+0x136>
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <__robot_init+0x180>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d106      	bne.n	80005de <__robot_init+0x112>
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <__robot_init+0x180>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	6393      	str	r3, [r2, #56]	; 0x38
 80005dc:	e011      	b.n	8000602 <__robot_init+0x136>
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <__robot_init+0x180>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	d106      	bne.n	80005f6 <__robot_init+0x12a>
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <__robot_init+0x180>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005f4:	e005      	b.n	8000602 <__robot_init+0x136>
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <__robot_init+0x180>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.rightWheel->wheelPWMTimer, mRobot.rightWheel->wheelPWMChannel, 0);
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <__robot_init+0x180>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d106      	bne.n	800061a <__robot_init+0x14e>
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <__robot_init+0x180>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	e024      	b.n	8000664 <__robot_init+0x198>
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__robot_init+0x180>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b04      	cmp	r3, #4
 8000622:	d106      	bne.n	8000632 <__robot_init+0x166>
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <__robot_init+0x180>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	6393      	str	r3, [r2, #56]	; 0x38
 8000630:	e018      	b.n	8000664 <__robot_init+0x198>
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <__robot_init+0x180>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b08      	cmp	r3, #8
 800063a:	d10d      	bne.n	8000658 <__robot_init+0x18c>
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <__robot_init+0x180>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000648:	e00c      	b.n	8000664 <__robot_init+0x198>
 800064a:	bf00      	nop
 800064c:	200000b8 	.word	0x200000b8
 8000650:	20000070 	.word	0x20000070
 8000654:	40020800 	.word	0x40020800
 8000658:	4b79      	ldr	r3, [pc, #484]	; (8000840 <__robot_init+0x374>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	6413      	str	r3, [r2, #64]	; 0x40

	//assign perferials to struct members
	mRobot.mLED->R_timer = &htim2;
 8000664:	4b76      	ldr	r3, [pc, #472]	; (8000840 <__robot_init+0x374>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a76      	ldr	r2, [pc, #472]	; (8000844 <__robot_init+0x378>)
 800066a:	601a      	str	r2, [r3, #0]
	mRobot.mLED->G_timer = &htim2;
 800066c:	4b74      	ldr	r3, [pc, #464]	; (8000840 <__robot_init+0x374>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a74      	ldr	r2, [pc, #464]	; (8000844 <__robot_init+0x378>)
 8000672:	605a      	str	r2, [r3, #4]
	mRobot.mLED->B_timer = &htim2;
 8000674:	4b72      	ldr	r3, [pc, #456]	; (8000840 <__robot_init+0x374>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4a72      	ldr	r2, [pc, #456]	; (8000844 <__robot_init+0x378>)
 800067a:	609a      	str	r2, [r3, #8]
	mRobot.mLED->R_channel = TIM_CHANNEL_2;
 800067c:	4b70      	ldr	r3, [pc, #448]	; (8000840 <__robot_init+0x374>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	2204      	movs	r2, #4
 8000682:	60da      	str	r2, [r3, #12]
	mRobot.mLED->G_channel = TIM_CHANNEL_3;
 8000684:	4b6e      	ldr	r3, [pc, #440]	; (8000840 <__robot_init+0x374>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	2208      	movs	r2, #8
 800068a:	611a      	str	r2, [r3, #16]
	mRobot.mLED->B_channel = TIM_CHANNEL_4;
 800068c:	4b6c      	ldr	r3, [pc, #432]	; (8000840 <__robot_init+0x374>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	220c      	movs	r2, #12
 8000692:	615a      	str	r2, [r3, #20]

	mRobot.mLED->currentBrightness_R = 0;
 8000694:	4b6a      	ldr	r3, [pc, #424]	; (8000840 <__robot_init+0x374>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
	mRobot.mLED->currentBrightness_G = 0;
 800069c:	4b68      	ldr	r3, [pc, #416]	; (8000840 <__robot_init+0x374>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2200      	movs	r2, #0
 80006a2:	769a      	strb	r2, [r3, #26]
	mRobot.mLED->currentBrightness_B = 0;
 80006a4:	4b66      	ldr	r3, [pc, #408]	; (8000840 <__robot_init+0x374>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2200      	movs	r2, #0
 80006aa:	771a      	strb	r2, [r3, #28]
	mRobot.mLED->settetBrightness_R = 0;
 80006ac:	4b64      	ldr	r3, [pc, #400]	; (8000840 <__robot_init+0x374>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
	mRobot.mLED->settetBrightness_G = 0;
 80006b4:	4b62      	ldr	r3, [pc, #392]	; (8000840 <__robot_init+0x374>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	2200      	movs	r2, #0
 80006ba:	76da      	strb	r2, [r3, #27]
	mRobot.mLED->settetBrightness_B = 0;
 80006bc:	4b60      	ldr	r3, [pc, #384]	; (8000840 <__robot_init+0x374>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2200      	movs	r2, #0
 80006c2:	775a      	strb	r2, [r3, #29]
	mRobot.mLED->brightnessChangeStep_R = 1;
 80006c4:	4b5e      	ldr	r3, [pc, #376]	; (8000840 <__robot_init+0x374>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	2201      	movs	r2, #1
 80006ca:	779a      	strb	r2, [r3, #30]
	mRobot.mLED->brightnessChangeStep_G = 1;
 80006cc:	4b5c      	ldr	r3, [pc, #368]	; (8000840 <__robot_init+0x374>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2201      	movs	r2, #1
 80006d2:	77da      	strb	r2, [r3, #31]
	mRobot.mLED->brightnessChangeStep_B = 1;
 80006d4:	4b5a      	ldr	r3, [pc, #360]	; (8000840 <__robot_init+0x374>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	2201      	movs	r2, #1
 80006da:	f883 2020 	strb.w	r2, [r3, #32]

	mRobot.mLED->ledMaxBrightness = 99;
 80006de:	4b58      	ldr	r3, [pc, #352]	; (8000840 <__robot_init+0x374>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2263      	movs	r2, #99	; 0x63
 80006e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	mRobot.mLED->ledMinBrightness = 0;
 80006e8:	4b55      	ldr	r3, [pc, #340]	; (8000840 <__robot_init+0x374>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	//start timers
	HAL_TIM_PWM_Start(mRobot.mLED->R_timer,  mRobot.mLED->R_channel);
 80006f2:	4b53      	ldr	r3, [pc, #332]	; (8000840 <__robot_init+0x374>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b51      	ldr	r3, [pc, #324]	; (8000840 <__robot_init+0x374>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	4619      	mov	r1, r3
 8000700:	4610      	mov	r0, r2
 8000702:	f002 f821 	bl	8002748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.mLED->G_timer,  mRobot.mLED->G_channel);
 8000706:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <__robot_init+0x374>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	4b4c      	ldr	r3, [pc, #304]	; (8000840 <__robot_init+0x374>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f002 f817 	bl	8002748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mRobot.mLED->B_timer,  mRobot.mLED->B_channel);
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <__robot_init+0x374>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	4b47      	ldr	r3, [pc, #284]	; (8000840 <__robot_init+0x374>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4619      	mov	r1, r3
 8000728:	4610      	mov	r0, r2
 800072a:	f002 f80d 	bl	8002748 <HAL_TIM_PWM_Start>

	//reset brightness
	__HAL_TIM_SET_COMPARE(mRobot.mLED->R_timer, mRobot.mLED->R_channel, 0);
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <__robot_init+0x374>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <__robot_init+0x27a>
 8000738:	4b41      	ldr	r3, [pc, #260]	; (8000840 <__robot_init+0x374>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
 8000744:	e01d      	b.n	8000782 <__robot_init+0x2b6>
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <__robot_init+0x374>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d106      	bne.n	800075e <__robot_init+0x292>
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <__robot_init+0x374>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	6393      	str	r3, [r2, #56]	; 0x38
 800075c:	e011      	b.n	8000782 <__robot_init+0x2b6>
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <__robot_init+0x374>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2b08      	cmp	r3, #8
 8000766:	d106      	bne.n	8000776 <__robot_init+0x2aa>
 8000768:	4b35      	ldr	r3, [pc, #212]	; (8000840 <__robot_init+0x374>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000774:	e005      	b.n	8000782 <__robot_init+0x2b6>
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <__robot_init+0x374>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->G_timer, mRobot.mLED->G_channel, 0);
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <__robot_init+0x374>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d106      	bne.n	800079a <__robot_init+0x2ce>
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <__robot_init+0x374>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
 8000798:	e01d      	b.n	80007d6 <__robot_init+0x30a>
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <__robot_init+0x374>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d106      	bne.n	80007b2 <__robot_init+0x2e6>
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <__robot_init+0x374>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	6393      	str	r3, [r2, #56]	; 0x38
 80007b0:	e011      	b.n	80007d6 <__robot_init+0x30a>
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <__robot_init+0x374>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d106      	bne.n	80007ca <__robot_init+0x2fe>
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <__robot_init+0x374>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007c8:	e005      	b.n	80007d6 <__robot_init+0x30a>
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <__robot_init+0x374>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, 0);
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <__robot_init+0x374>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <__robot_init+0x322>
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <__robot_init+0x374>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
 80007ec:	e01d      	b.n	800082a <__robot_init+0x35e>
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <__robot_init+0x374>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d106      	bne.n	8000806 <__robot_init+0x33a>
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <__robot_init+0x374>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	6393      	str	r3, [r2, #56]	; 0x38
 8000804:	e011      	b.n	800082a <__robot_init+0x35e>
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <__robot_init+0x374>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	2b08      	cmp	r3, #8
 800080e:	d106      	bne.n	800081e <__robot_init+0x352>
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <__robot_init+0x374>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	2300      	movs	r3, #0
 800081a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800081c:	e005      	b.n	800082a <__robot_init+0x35e>
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <__robot_init+0x374>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	6413      	str	r3, [r2, #64]	; 0x40

	mRobot.IRQ_timer = &htim2;
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <__robot_init+0x374>)
 800082c:	4a05      	ldr	r2, [pc, #20]	; (8000844 <__robot_init+0x378>)
 800082e:	611a      	str	r2, [r3, #16]
	//start interrupt timer
	HAL_TIM_Base_Start_IT(mRobot.IRQ_timer);
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <__robot_init+0x374>)
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fe65 	bl	8002504 <HAL_TIM_Base_Start_IT>

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000b8 	.word	0x200000b8
 8000844:	20000028 	.word	0x20000028

08000848 <__robot_update_wheel_speed>:

void __robot_update_wheel_speed(robotWheel *wheel){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(mRobot.mDir == STOP){
 8000850:	4b57      	ldr	r3, [pc, #348]	; (80009b0 <__robot_update_wheel_speed+0x168>)
 8000852:	7b5b      	ldrb	r3, [r3, #13]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d102      	bne.n	800085e <__robot_update_wheel_speed+0x16>
		wheel->settedSpeed_forPWM = 0;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	725a      	strb	r2, [r3, #9]
	}

	if(wheel->currentSpeed_forPWM > wheel->settedSpeed_forPWM){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800086a:	429a      	cmp	r2, r3
 800086c:	dd20      	ble.n	80008b0 <__robot_update_wheel_speed+0x68>
		if(wheel->currentSpeed_forPWM - mRobot.acceleration_forPWM < wheel->wheelMinSpeed_forPWM){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000874:	461a      	mov	r2, r3
 8000876:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <__robot_update_wheel_speed+0x168>)
 8000878:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	f992 200b 	ldrsb.w	r2, [r2, #11]
 8000884:	4293      	cmp	r3, r2
 8000886:	da05      	bge.n	8000894 <__robot_update_wheel_speed+0x4c>
			wheel->currentSpeed_forPWM = wheel->wheelMinSpeed_forPWM;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f993 200b 	ldrsb.w	r2, [r3, #11]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	721a      	strb	r2, [r3, #8]
 8000892:	e035      	b.n	8000900 <__robot_update_wheel_speed+0xb8>
		}
		else{
			wheel->currentSpeed_forPWM -= mRobot.acceleration_forPWM;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <__robot_update_wheel_speed+0x168>)
 800089e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	b25a      	sxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	721a      	strb	r2, [r3, #8]
 80008ae:	e027      	b.n	8000900 <__robot_update_wheel_speed+0xb8>
		}
	}
	else if(wheel->currentSpeed_forPWM < wheel->settedSpeed_forPWM){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80008bc:	429a      	cmp	r2, r3
 80008be:	da1f      	bge.n	8000900 <__robot_update_wheel_speed+0xb8>
		if(wheel->currentSpeed_forPWM + mRobot.acceleration_forPWM > wheel->wheelMaxSpeed_forPWM){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <__robot_update_wheel_speed+0x168>)
 80008ca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	f992 200a 	ldrsb.w	r2, [r2, #10]
 80008d6:	4293      	cmp	r3, r2
 80008d8:	dd05      	ble.n	80008e6 <__robot_update_wheel_speed+0x9e>
			wheel->currentSpeed_forPWM = wheel->wheelMaxSpeed_forPWM;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f993 200a 	ldrsb.w	r2, [r3, #10]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	721a      	strb	r2, [r3, #8]
 80008e4:	e00c      	b.n	8000900 <__robot_update_wheel_speed+0xb8>
		}
		else{
			wheel->currentSpeed_forPWM += mRobot.acceleration_forPWM;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <__robot_update_wheel_speed+0x168>)
 80008f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	b25a      	sxtb	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	721a      	strb	r2, [r3, #8]
		}
	}

	if(wheel->currentSpeed_forPWM <= 0){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc08      	bgt.n	800091c <__robot_update_wheel_speed+0xd4>
		HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_SET);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68d8      	ldr	r0, [r3, #12]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	8a1b      	ldrh	r3, [r3, #16]
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	f001 f967 	bl	8001be8 <HAL_GPIO_WritePin>
 800091a:	e007      	b.n	800092c <__robot_update_wheel_speed+0xe4>
	}
	else{
		HAL_GPIO_WritePin(wheel->dirPort, wheel->dirPin, GPIO_PIN_RESET);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68d8      	ldr	r0, [r3, #12]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	8a1b      	ldrh	r3, [r3, #16]
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	f001 f95e 	bl	8001be8 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10b      	bne.n	800094c <__robot_update_wheel_speed+0x104>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	bfb8      	it	lt
 800093e:	425b      	neglt	r3, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
}
 800094a:	e02d      	b.n	80009a8 <__robot_update_wheel_speed+0x160>
	__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d10c      	bne.n	800096e <__robot_update_wheel_speed+0x126>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2d9      	uxtb	r1, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	460b      	mov	r3, r1
 800096a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800096c:	e01c      	b.n	80009a8 <__robot_update_wheel_speed+0x160>
	__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b08      	cmp	r3, #8
 8000974:	d10c      	bne.n	8000990 <__robot_update_wheel_speed+0x148>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	bfb8      	it	lt
 8000980:	425b      	neglt	r3, r3
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	460b      	mov	r3, r1
 800098c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800098e:	e00b      	b.n	80009a8 <__robot_update_wheel_speed+0x160>
	__HAL_TIM_SET_COMPARE(wheel->wheelPWMTimer, wheel->wheelPWMChannel, abs(wheel->currentSpeed_forPWM));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	b2d9      	uxtb	r1, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	460b      	mov	r3, r1
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000b8 	.word	0x200000b8

080009b4 <__robot_update_led_light>:

void __robot_update_led_light(){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

	//update brightness vaules in the structure
	if(mRobot.mLED->currentBrightness_R > mRobot.mLED->settetBrightness_R ){
 80009b8:	4b8c      	ldr	r3, [pc, #560]	; (8000bec <__robot_update_led_light+0x238>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	7e1a      	ldrb	r2, [r3, #24]
 80009be:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <__robot_update_led_light+0x238>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	7e5b      	ldrb	r3, [r3, #25]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d921      	bls.n	8000a0c <__robot_update_led_light+0x58>
		//check boundary conditions
		if(mRobot.mLED->currentBrightness_R - mRobot.mLED->brightnessChangeStep_R < mRobot.mLED->ledMinBrightness){
 80009c8:	4b88      	ldr	r3, [pc, #544]	; (8000bec <__robot_update_led_light+0x238>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	7e1b      	ldrb	r3, [r3, #24]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b86      	ldr	r3, [pc, #536]	; (8000bec <__robot_update_led_light+0x238>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	7f9b      	ldrb	r3, [r3, #30]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	4a84      	ldr	r2, [pc, #528]	; (8000bec <__robot_update_led_light+0x238>)
 80009da:	6892      	ldr	r2, [r2, #8]
 80009dc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80009e0:	4293      	cmp	r3, r2
 80009e2:	da07      	bge.n	80009f4 <__robot_update_led_light+0x40>
			mRobot.mLED->currentBrightness_R = mRobot.mLED->ledMinBrightness;
 80009e4:	4b81      	ldr	r3, [pc, #516]	; (8000bec <__robot_update_led_light+0x238>)
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	4b80      	ldr	r3, [pc, #512]	; (8000bec <__robot_update_led_light+0x238>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80009f0:	761a      	strb	r2, [r3, #24]
 80009f2:	e034      	b.n	8000a5e <__robot_update_led_light+0xaa>
		}
		else{
			mRobot.mLED->currentBrightness_R -= mRobot.mLED->brightnessChangeStep_R;
 80009f4:	4b7d      	ldr	r3, [pc, #500]	; (8000bec <__robot_update_led_light+0x238>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	7e19      	ldrb	r1, [r3, #24]
 80009fa:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <__robot_update_led_light+0x238>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	7f9a      	ldrb	r2, [r3, #30]
 8000a00:	4b7a      	ldr	r3, [pc, #488]	; (8000bec <__robot_update_led_light+0x238>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	1a8a      	subs	r2, r1, r2
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	761a      	strb	r2, [r3, #24]
 8000a0a:	e028      	b.n	8000a5e <__robot_update_led_light+0xaa>
		}
	}
	else if(mRobot.mLED->currentBrightness_R < mRobot.mLED->settetBrightness_R){
 8000a0c:	4b77      	ldr	r3, [pc, #476]	; (8000bec <__robot_update_led_light+0x238>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	7e1a      	ldrb	r2, [r3, #24]
 8000a12:	4b76      	ldr	r3, [pc, #472]	; (8000bec <__robot_update_led_light+0x238>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	7e5b      	ldrb	r3, [r3, #25]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d220      	bcs.n	8000a5e <__robot_update_led_light+0xaa>
		if(mRobot.mLED->currentBrightness_R + mRobot.mLED->brightnessChangeStep_R > mRobot.mLED->ledMinBrightness){
 8000a1c:	4b73      	ldr	r3, [pc, #460]	; (8000bec <__robot_update_led_light+0x238>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	7e1b      	ldrb	r3, [r3, #24]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b71      	ldr	r3, [pc, #452]	; (8000bec <__robot_update_led_light+0x238>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	7f9b      	ldrb	r3, [r3, #30]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a6f      	ldr	r2, [pc, #444]	; (8000bec <__robot_update_led_light+0x238>)
 8000a2e:	6892      	ldr	r2, [r2, #8]
 8000a30:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000a34:	4293      	cmp	r3, r2
 8000a36:	dd07      	ble.n	8000a48 <__robot_update_led_light+0x94>
			mRobot.mLED->currentBrightness_R = mRobot.mLED->ledMaxBrightness;
 8000a38:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <__robot_update_led_light+0x238>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	4b6b      	ldr	r3, [pc, #428]	; (8000bec <__robot_update_led_light+0x238>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000a44:	761a      	strb	r2, [r3, #24]
 8000a46:	e00a      	b.n	8000a5e <__robot_update_led_light+0xaa>
		}
		else{
			mRobot.mLED->currentBrightness_R += mRobot.mLED->brightnessChangeStep_R;
 8000a48:	4b68      	ldr	r3, [pc, #416]	; (8000bec <__robot_update_led_light+0x238>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	7e19      	ldrb	r1, [r3, #24]
 8000a4e:	4b67      	ldr	r3, [pc, #412]	; (8000bec <__robot_update_led_light+0x238>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	7f9a      	ldrb	r2, [r3, #30]
 8000a54:	4b65      	ldr	r3, [pc, #404]	; (8000bec <__robot_update_led_light+0x238>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	440a      	add	r2, r1
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	761a      	strb	r2, [r3, #24]
		}
	}


	if(mRobot.mLED->currentBrightness_G > mRobot.mLED->settetBrightness_G ){
 8000a5e:	4b63      	ldr	r3, [pc, #396]	; (8000bec <__robot_update_led_light+0x238>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	7e9a      	ldrb	r2, [r3, #26]
 8000a64:	4b61      	ldr	r3, [pc, #388]	; (8000bec <__robot_update_led_light+0x238>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	7edb      	ldrb	r3, [r3, #27]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d921      	bls.n	8000ab2 <__robot_update_led_light+0xfe>
		if(mRobot.mLED->currentBrightness_G - mRobot.mLED->brightnessChangeStep_G < mRobot.mLED->ledMinBrightness){
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <__robot_update_led_light+0x238>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	7e9b      	ldrb	r3, [r3, #26]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <__robot_update_led_light+0x238>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	7fdb      	ldrb	r3, [r3, #31]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a5b      	ldr	r2, [pc, #364]	; (8000bec <__robot_update_led_light+0x238>)
 8000a80:	6892      	ldr	r2, [r2, #8]
 8000a82:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000a86:	4293      	cmp	r3, r2
 8000a88:	da07      	bge.n	8000a9a <__robot_update_led_light+0xe6>
			mRobot.mLED->currentBrightness_G = mRobot.mLED->ledMinBrightness;
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <__robot_update_led_light+0x238>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	4b57      	ldr	r3, [pc, #348]	; (8000bec <__robot_update_led_light+0x238>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000a96:	769a      	strb	r2, [r3, #26]
 8000a98:	e034      	b.n	8000b04 <__robot_update_led_light+0x150>
		}
		else{
			mRobot.mLED->currentBrightness_G -= mRobot.mLED->brightnessChangeStep_G;
 8000a9a:	4b54      	ldr	r3, [pc, #336]	; (8000bec <__robot_update_led_light+0x238>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	7e99      	ldrb	r1, [r3, #26]
 8000aa0:	4b52      	ldr	r3, [pc, #328]	; (8000bec <__robot_update_led_light+0x238>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	7fda      	ldrb	r2, [r3, #31]
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <__robot_update_led_light+0x238>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	1a8a      	subs	r2, r1, r2
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	769a      	strb	r2, [r3, #26]
 8000ab0:	e028      	b.n	8000b04 <__robot_update_led_light+0x150>
		}
	}
	else if(mRobot.mLED->currentBrightness_G < mRobot.mLED->settetBrightness_G){
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <__robot_update_led_light+0x238>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	7e9a      	ldrb	r2, [r3, #26]
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <__robot_update_led_light+0x238>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	7edb      	ldrb	r3, [r3, #27]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d220      	bcs.n	8000b04 <__robot_update_led_light+0x150>
		if(mRobot.mLED->currentBrightness_G + mRobot.mLED->brightnessChangeStep_G > mRobot.mLED->ledMinBrightness){
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <__robot_update_led_light+0x238>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	7e9b      	ldrb	r3, [r3, #26]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <__robot_update_led_light+0x238>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	7fdb      	ldrb	r3, [r3, #31]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <__robot_update_led_light+0x238>)
 8000ad4:	6892      	ldr	r2, [r2, #8]
 8000ad6:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000ada:	4293      	cmp	r3, r2
 8000adc:	dd07      	ble.n	8000aee <__robot_update_led_light+0x13a>
			mRobot.mLED->currentBrightness_G = mRobot.mLED->ledMaxBrightness;
 8000ade:	4b43      	ldr	r3, [pc, #268]	; (8000bec <__robot_update_led_light+0x238>)
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <__robot_update_led_light+0x238>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000aea:	769a      	strb	r2, [r3, #26]
 8000aec:	e00a      	b.n	8000b04 <__robot_update_led_light+0x150>
		}
		else{
			mRobot.mLED->currentBrightness_G += mRobot.mLED->brightnessChangeStep_G;
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <__robot_update_led_light+0x238>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	7e99      	ldrb	r1, [r3, #26]
 8000af4:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <__robot_update_led_light+0x238>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	7fda      	ldrb	r2, [r3, #31]
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <__robot_update_led_light+0x238>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	440a      	add	r2, r1
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	769a      	strb	r2, [r3, #26]
		}
	}


	if(mRobot.mLED->currentBrightness_B > mRobot.mLED->settetBrightness_B ){
 8000b04:	4b39      	ldr	r3, [pc, #228]	; (8000bec <__robot_update_led_light+0x238>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	7f1a      	ldrb	r2, [r3, #28]
 8000b0a:	4b38      	ldr	r3, [pc, #224]	; (8000bec <__robot_update_led_light+0x238>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	7f5b      	ldrb	r3, [r3, #29]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d923      	bls.n	8000b5c <__robot_update_led_light+0x1a8>
		if(mRobot.mLED->currentBrightness_B - mRobot.mLED->brightnessChangeStep_B < mRobot.mLED->ledMinBrightness){
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <__robot_update_led_light+0x238>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	7f1b      	ldrb	r3, [r3, #28]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <__robot_update_led_light+0x238>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <__robot_update_led_light+0x238>)
 8000b28:	6892      	ldr	r2, [r2, #8]
 8000b2a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	da07      	bge.n	8000b42 <__robot_update_led_light+0x18e>
			mRobot.mLED->currentBrightness_B = mRobot.mLED->ledMinBrightness;
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <__robot_update_led_light+0x238>)
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <__robot_update_led_light+0x238>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000b3e:	771a      	strb	r2, [r3, #28]
 8000b40:	e037      	b.n	8000bb2 <__robot_update_led_light+0x1fe>
		}
		else{
			mRobot.mLED->currentBrightness_B -= mRobot.mLED->brightnessChangeStep_B;
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <__robot_update_led_light+0x238>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	7f19      	ldrb	r1, [r3, #28]
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <__robot_update_led_light+0x238>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <__robot_update_led_light+0x238>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	1a8a      	subs	r2, r1, r2
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	771a      	strb	r2, [r3, #28]
 8000b5a:	e02a      	b.n	8000bb2 <__robot_update_led_light+0x1fe>
		}
	}
	else if(mRobot.mLED->currentBrightness_B < mRobot.mLED->settetBrightness_B){
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <__robot_update_led_light+0x238>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	7f1a      	ldrb	r2, [r3, #28]
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <__robot_update_led_light+0x238>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	7f5b      	ldrb	r3, [r3, #29]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d222      	bcs.n	8000bb2 <__robot_update_led_light+0x1fe>
		if(mRobot.mLED->currentBrightness_B + mRobot.mLED->brightnessChangeStep_B > mRobot.mLED->ledMinBrightness){
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <__robot_update_led_light+0x238>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	7f1b      	ldrb	r3, [r3, #28]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <__robot_update_led_light+0x238>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <__robot_update_led_light+0x238>)
 8000b80:	6892      	ldr	r2, [r2, #8]
 8000b82:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000b86:	4293      	cmp	r3, r2
 8000b88:	dd07      	ble.n	8000b9a <__robot_update_led_light+0x1e6>
			mRobot.mLED->currentBrightness_B = mRobot.mLED->ledMaxBrightness;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <__robot_update_led_light+0x238>)
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <__robot_update_led_light+0x238>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8000b96:	771a      	strb	r2, [r3, #28]
 8000b98:	e00b      	b.n	8000bb2 <__robot_update_led_light+0x1fe>
		}
		else{
			mRobot.mLED->currentBrightness_B += mRobot.mLED->brightnessChangeStep_B;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <__robot_update_led_light+0x238>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	7f19      	ldrb	r1, [r3, #28]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <__robot_update_led_light+0x238>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <__robot_update_led_light+0x238>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	440a      	add	r2, r1
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	771a      	strb	r2, [r3, #28]
		}
	}

	//set updated values in the timer
	__HAL_TIM_SET_COMPARE(mRobot.mLED->R_timer, mRobot.mLED->R_channel, mRobot.mLED->currentBrightness_B);
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <__robot_update_led_light+0x238>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d108      	bne.n	8000bce <__robot_update_led_light+0x21a>
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <__robot_update_led_light+0x238>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	7f1a      	ldrb	r2, [r3, #28]
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <__robot_update_led_light+0x238>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
 8000bcc:	e028      	b.n	8000c20 <__robot_update_led_light+0x26c>
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <__robot_update_led_light+0x238>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d10b      	bne.n	8000bf0 <__robot_update_led_light+0x23c>
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__robot_update_led_light+0x238>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	7f19      	ldrb	r1, [r3, #28]
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <__robot_update_led_light+0x238>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	460b      	mov	r3, r1
 8000be8:	6393      	str	r3, [r2, #56]	; 0x38
 8000bea:	e019      	b.n	8000c20 <__robot_update_led_light+0x26c>
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d109      	bne.n	8000c0e <__robot_update_led_light+0x25a>
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	7f19      	ldrb	r1, [r3, #28]
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c0c:	e008      	b.n	8000c20 <__robot_update_led_light+0x26c>
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	7f19      	ldrb	r1, [r3, #28]
 8000c14:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->G_timer, mRobot.mLED->G_channel, mRobot.mLED->currentBrightness_G);
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d108      	bne.n	8000c3c <__robot_update_led_light+0x288>
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	7e9a      	ldrb	r2, [r3, #26]
 8000c30:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3a:	e026      	b.n	8000c8a <__robot_update_led_light+0x2d6>
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d109      	bne.n	8000c5a <__robot_update_led_light+0x2a6>
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	7e99      	ldrb	r1, [r3, #26]
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38
 8000c58:	e017      	b.n	8000c8a <__robot_update_led_light+0x2d6>
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d109      	bne.n	8000c78 <__robot_update_led_light+0x2c4>
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	7e99      	ldrb	r1, [r3, #26]
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	460b      	mov	r3, r1
 8000c74:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c76:	e008      	b.n	8000c8a <__robot_update_led_light+0x2d6>
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	7e99      	ldrb	r1, [r3, #26]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	460b      	mov	r3, r1
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <__robot_update_led_light+0x2f2>
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	7f1a      	ldrb	r2, [r3, #28]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ca4:	e026      	b.n	8000cf4 <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d109      	bne.n	8000cc4 <__robot_update_led_light+0x310>
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	7f19      	ldrb	r1, [r3, #28]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cc2:	e017      	b.n	8000cf4 <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d109      	bne.n	8000ce2 <__robot_update_led_light+0x32e>
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	7f19      	ldrb	r1, [r3, #28]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ce0:	e008      	b.n	8000cf4 <__robot_update_led_light+0x340>
	__HAL_TIM_SET_COMPARE(mRobot.mLED->B_timer, mRobot.mLED->B_channel, mRobot.mLED->currentBrightness_B);
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	7f19      	ldrb	r1, [r3, #28]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <__robot_update_led_light+0x34c>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000b8 	.word	0x200000b8

08000d04 <__robot_Move>:

void __robot_Move(moveDir md, int8_t L_power, int8_t R_power){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]

	switch(md){
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d83d      	bhi.n	8000d98 <__robot_Move+0x94>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <__robot_Move+0x20>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d39 	.word	0x08000d39
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d49 	.word	0x08000d49
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d59 	.word	0x08000d59
	case FORWARD:
		mRobot.mDir = FORWARD;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <__robot_Move+0xac>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	735a      	strb	r2, [r3, #13]
		break;
 8000d3e:	e02b      	b.n	8000d98 <__robot_Move+0x94>
	case BACWARD:
		mRobot.mDir = BACWARD;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <__robot_Move+0xac>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	735a      	strb	r2, [r3, #13]
		break;
 8000d46:	e027      	b.n	8000d98 <__robot_Move+0x94>
	case LEFT:
		mRobot.mDir = LEFT;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <__robot_Move+0xac>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	735a      	strb	r2, [r3, #13]
		break;
 8000d4e:	e023      	b.n	8000d98 <__robot_Move+0x94>
	case RIGHT:
		mRobot.mDir = RIGHT;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <__robot_Move+0xac>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	735a      	strb	r2, [r3, #13]
		break;
 8000d56:	e01f      	b.n	8000d98 <__robot_Move+0x94>
	case STOP:
		mRobot.mDir = STOP;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <__robot_Move+0xac>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	735a      	strb	r2, [r3, #13]
		HAL_GPIO_WritePin(mRobot.leftWheel->dirPort, mRobot.leftWheel->dirPin, GPIO_PIN_RESET);
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <__robot_Move+0xac>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68d8      	ldr	r0, [r3, #12]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <__robot_Move+0xac>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	8a1b      	ldrh	r3, [r3, #16]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f000 ff3b 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mRobot.rightWheel->dirPort, mRobot.rightWheel->dirPin, GPIO_PIN_RESET);
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <__robot_Move+0xac>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	68d8      	ldr	r0, [r3, #12]
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <__robot_Move+0xac>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	8a1b      	ldrh	r3, [r3, #16]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f000 ff31 	bl	8001be8 <HAL_GPIO_WritePin>
		mRobot.leftWheel->settedSpeed_forPWM = 0;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <__robot_Move+0xac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	725a      	strb	r2, [r3, #9]
		mRobot.rightWheel->settedSpeed_forPWM = 0;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <__robot_Move+0xac>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	725a      	strb	r2, [r3, #9]
		return;
 8000d96:	e007      	b.n	8000da8 <__robot_Move+0xa4>
	}

	mRobot.leftWheel->settedSpeed_forPWM = L_power;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <__robot_Move+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	725a      	strb	r2, [r3, #9]
	mRobot.rightWheel->settedSpeed_forPWM = R_power;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <__robot_Move+0xac>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	797a      	ldrb	r2, [r7, #5]
 8000da6:	725a      	strb	r2, [r3, #9]
}
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000b8 	.word	0x200000b8

08000db4 <__robot_set_led_light>:

void __robot_set_led_light(uint8_t R, uint8_t G, uint8_t B){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	717b      	strb	r3, [r7, #5]
	mRobot.mLED->settetBrightness_R = R;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <__robot_set_led_light+0x38>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	765a      	strb	r2, [r3, #25]
	mRobot.mLED->settetBrightness_G = G;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <__robot_set_led_light+0x38>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	76da      	strb	r2, [r3, #27]
	mRobot.mLED->settetBrightness_B = B;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <__robot_set_led_light+0x38>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	797a      	ldrb	r2, [r7, #5]
 8000ddc:	775a      	strb	r2, [r3, #29]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000b8 	.word	0x200000b8

08000df0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if (htim == mRobot.IRQ_timer)
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d10b      	bne.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  __robot_update_led_light();
 8000e02:	f7ff fdd7 	bl	80009b4 <__robot_update_led_light>
	  __robot_update_wheel_speed(mRobot.leftWheel);
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd1c 	bl	8000848 <__robot_update_wheel_speed>
	  __robot_update_wheel_speed(mRobot.rightWheel);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd17 	bl	8000848 <__robot_update_wheel_speed>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000b8 	.word	0x200000b8

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b098      	sub	sp, #96	; 0x60
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fbbb 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f88f 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 fa39 	bl	80012ac <MX_GPIO_Init>
  MX_TIM8_Init();
 8000e3a:	f000 f98b 	bl	8001154 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e3e:	f000 f8e7 	bl	8001010 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	robotWheel rw, lw;
	RGB_led led;
	mRobot.leftWheel = &lw;
 8000e42:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <main+0x128>)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	6013      	str	r3, [r2, #0]
	mRobot.rightWheel = &rw;
 8000e4a:	4a41      	ldr	r2, [pc, #260]	; (8000f50 <main+0x128>)
 8000e4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e50:	6053      	str	r3, [r2, #4]
	mRobot.mLED = &led;
 8000e52:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <main+0x128>)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	6093      	str	r3, [r2, #8]

	__robot_init();
 8000e58:	f7ff fb38 	bl	80004cc <__robot_init>

	uint32_t motorTime, ledTime, currTime;
	motorTime = ledTime = currTime = HAL_GetTick();
 8000e5c:	f000 fc0a 	bl	8001674 <HAL_GetTick>
 8000e60:	6538      	str	r0, [r7, #80]	; 0x50
 8000e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e68:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint8_t motorState = 0, ledState = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		currTime = HAL_GetTick();
 8000e76:	f000 fbfd 	bl	8001674 <HAL_GetTick>
 8000e7a:	6538      	str	r0, [r7, #80]	; 0x50

		if(currTime - motorTime >= 3000 && motorState == 0){
 8000e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d90d      	bls.n	8000ea6 <main+0x7e>
 8000e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <main+0x7e>
			__robot_Move(FORWARD, 99, 99);
 8000e92:	2263      	movs	r2, #99	; 0x63
 8000e94:	2163      	movs	r1, #99	; 0x63
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff34 	bl	8000d04 <__robot_Move>
			motorState = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			motorTime = currTime;
 8000ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		if(currTime - motorTime >= 3000 && motorState == 1){
 8000ea6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d90f      	bls.n	8000ed4 <main+0xac>
 8000eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d10b      	bne.n	8000ed4 <main+0xac>
			__robot_Move(BACWARD, -99, -99);
 8000ebc:	f06f 0262 	mvn.w	r2, #98	; 0x62
 8000ec0:	f06f 0162 	mvn.w	r1, #98	; 0x62
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff ff1d 	bl	8000d04 <__robot_Move>
			motorState = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			motorTime = currTime;
 8000ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		if(currTime - ledTime >= 2000 && ledState == 0){
 8000ed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ede:	d30d      	bcc.n	8000efc <main+0xd4>
 8000ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <main+0xd4>
			__robot_set_led_light(99,0,0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	2063      	movs	r0, #99	; 0x63
 8000eee:	f7ff ff61 	bl	8000db4 <__robot_set_led_light>
			ledState = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			ledTime = currTime;
 8000ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000efa:	65bb      	str	r3, [r7, #88]	; 0x58
		}

		if(currTime - ledTime >= 2000 && ledState == 1){
 8000efc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f06:	d30d      	bcc.n	8000f24 <main+0xfc>
 8000f08:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d109      	bne.n	8000f24 <main+0xfc>
			__robot_set_led_light(0,99,0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2163      	movs	r1, #99	; 0x63
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ff4d 	bl	8000db4 <__robot_set_led_light>
			ledState = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			ledTime = currTime;
 8000f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
		}

		if(currTime - ledTime >= 2000 && ledState == 2){
 8000f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f2e:	d3a2      	bcc.n	8000e76 <main+0x4e>
 8000f30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d19e      	bne.n	8000e76 <main+0x4e>
			__robot_set_led_light(0,0,99);
 8000f38:	2263      	movs	r2, #99	; 0x63
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ff39 	bl	8000db4 <__robot_set_led_light>
			ledState = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			ledTime = currTime;
 8000f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f4a:	65bb      	str	r3, [r7, #88]	; 0x58
		currTime = HAL_GetTick();
 8000f4c:	e793      	b.n	8000e76 <main+0x4e>
 8000f4e:	bf00      	nop
 8000f50:	200000b8 	.word	0x200000b8

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fbe4 	bl	8003730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <SystemClock_Config+0xb4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <SystemClock_Config+0xb4>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <SystemClock_Config+0xb4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <SystemClock_Config+0xb8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <SystemClock_Config+0xb8>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <SystemClock_Config+0xb8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fe29 	bl	8001c1c <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fd0:	f000 f9b0 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f88c 	bl	800210c <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ffa:	f000 f99b 	bl	8001334 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	; 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b43      	ldr	r3, [pc, #268]	; (8001150 <MX_TIM2_Init+0x140>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <MX_TIM2_Init+0x140>)
 800104a:	229f      	movs	r2, #159	; 0x9f
 800104c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <MX_TIM2_Init+0x140>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001054:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_TIM2_Init+0x140>)
 8001056:	2263      	movs	r2, #99	; 0x63
 8001058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <MX_TIM2_Init+0x140>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_TIM2_Init+0x140>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001066:	483a      	ldr	r0, [pc, #232]	; (8001150 <MX_TIM2_Init+0x140>)
 8001068:	f001 f9fc 	bl	8002464 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001072:	f000 f95f 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001080:	4619      	mov	r1, r3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <MX_TIM2_Init+0x140>)
 8001084:	f001 fe4e 	bl	8002d24 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800108e:	f000 f951 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001092:	482f      	ldr	r0, [pc, #188]	; (8001150 <MX_TIM2_Init+0x140>)
 8001094:	f001 faa6 	bl	80025e4 <HAL_TIM_OC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800109e:	f000 f949 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a2:	482b      	ldr	r0, [pc, #172]	; (8001150 <MX_TIM2_Init+0x140>)
 80010a4:	f001 faf7 	bl	8002696 <HAL_TIM_PWM_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80010ae:	f000 f941 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4619      	mov	r1, r3
 80010c0:	4823      	ldr	r0, [pc, #140]	; (8001150 <MX_TIM2_Init+0x140>)
 80010c2:	f002 fa2f 	bl	8003524 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80010cc:	f000 f932 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9;
 80010d4:	2309      	movs	r3, #9
 80010d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_TIM2_Init+0x140>)
 80010e8:	f001 fcfe 	bl	8002ae8 <HAL_TIM_OC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80010f2:	f000 f91f 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <MX_TIM2_Init+0x140>)
 8001106:	f001 fd4b 	bl	8002ba0 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001110:	f000 f910 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2208      	movs	r2, #8
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM2_Init+0x140>)
 800111c:	f001 fd40 	bl	8002ba0 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001126:	f000 f905 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	220c      	movs	r2, #12
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM2_Init+0x140>)
 8001132:	f001 fd35 	bl	8002ba0 <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x130>
  {
    Error_Handler();
 800113c:	f000 f8fa 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM2_Init+0x140>)
 8001142:	f000 f961 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8001146:	bf00      	nop
 8001148:	3738      	adds	r7, #56	; 0x38
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000028 	.word	0x20000028

08001154 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f002 facf 	bl	8003730 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <MX_TIM8_Init+0x150>)
 8001194:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <MX_TIM8_Init+0x154>)
 8001196:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 159;
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <MX_TIM8_Init+0x150>)
 800119a:	229f      	movs	r2, #159	; 0x9f
 800119c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011a6:	2263      	movs	r2, #99	; 0x63
 80011a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011bc:	4839      	ldr	r0, [pc, #228]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011be:	f001 f951 	bl	8002464 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80011c8:	f000 f8b4 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d6:	4619      	mov	r1, r3
 80011d8:	4832      	ldr	r0, [pc, #200]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011da:	f001 fda3 	bl	8002d24 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80011e4:	f000 f8a6 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011e8:	482e      	ldr	r0, [pc, #184]	; (80012a4 <MX_TIM8_Init+0x150>)
 80011ea:	f001 fa54 	bl	8002696 <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80011f4:	f000 f89e 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001200:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001204:	4619      	mov	r1, r3
 8001206:	4827      	ldr	r0, [pc, #156]	; (80012a4 <MX_TIM8_Init+0x150>)
 8001208:	f002 f98c 	bl	8003524 <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001212:	f000 f88f 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001216:	2360      	movs	r3, #96	; 0x60
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	481a      	ldr	r0, [pc, #104]	; (80012a4 <MX_TIM8_Init+0x150>)
 800123c:	f001 fcb0 	bl	8002ba0 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001246:	f000 f875 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	2208      	movs	r2, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_TIM8_Init+0x150>)
 8001254:	f001 fca4 	bl	8002ba0 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800125e:	f000 f869 	bl	8001334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM8_Init+0x150>)
 8001286:	f002 f9c9 	bl	800361c <HAL_TIMEx_ConfigBreakDeadTime>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001290:	f000 f850 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM8_Init+0x150>)
 8001296:	f000 f8b7 	bl	8001408 <HAL_TIM_MspPostInit>

}
 800129a:	bf00      	nop
 800129c:	3758      	adds	r7, #88	; 0x58
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000070 	.word	0x20000070
 80012a8:	40010400 	.word	0x40010400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_GPIO_Init+0x80>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <MX_GPIO_Init+0x80>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_GPIO_Init+0x80>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_GPIO_Init+0x80>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <MX_GPIO_Init+0x80>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_GPIO_Init+0x80>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_R_PH_Pin|MOTOR_L_PH_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <MX_GPIO_Init+0x84>)
 8001302:	f000 fc71 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_R_PH_Pin MOTOR_L_PH_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_PH_Pin|MOTOR_L_PH_Pin;
 8001306:	f44f 7320 	mov.w	r3, #640	; 0x280
 800130a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_GPIO_Init+0x84>)
 8001320:	f000 fac6 	bl	80018b0 <HAL_GPIO_Init>

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d116      	bne.n	80013d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	201c      	movs	r0, #28
 80013c4:	f000 fa3d 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013c8:	201c      	movs	r0, #28
 80013ca:	f000 fa56 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013ce:	e012      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_TIM_Base_MspInit+0x74>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10d      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_TIM_Base_MspInit+0x70>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d11e      	bne.n	8001468 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 8001446:	230e      	movs	r3, #14
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001456:	2301      	movs	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001462:	f000 fa25 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001466:	e023      	b.n	80014b0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_TIM_MspPostInit+0xb8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11e      	bne.n	80014b0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_R_EN_Pin|MOTOR_L_EN_Pin;
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_TIM_MspPostInit+0xbc>)
 80014ac:	f000 fa00 	bl	80018b0 <HAL_GPIO_Init>
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40010400 	.word	0x40010400
 80014c4:	40020800 	.word	0x40020800

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f89a 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM2_IRQHandler+0x10>)
 8001522:	f001 f9d9 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000028 	.word	0x20000028

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f002 f8b1 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fc4f 	bl	8000e28 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001598:	08003778 	.word	0x08003778
  ldr r2, =_sbss
 800159c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015a0:	200000d0 	.word	0x200000d0

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f92b 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff feb0 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f943 	bl	8001896 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f90b 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	200000cc 	.word	0x200000cc

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200000cc 	.word	0x200000cc

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e16b      	b.n	8001ba4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 815a 	bne.w	8001b9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80b4 	beq.w	8001b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a5b      	ldr	r2, [pc, #364]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_GPIO_Init+0x31c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x21a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x216>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x328>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x32c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x20a>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae90 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e267      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d075      	beq.n	8001d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d00c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d112      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <HAL_RCC_OscConfig+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d157      	bne.n	8001d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e242      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x74>
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a75      	ldr	r2, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a68      	ldr	r2, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a65      	ldr	r2, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fcce 	bl	8001674 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fcca 	bl	8001674 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e207      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xc0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcba 	bl	8001674 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fcb6 	bl	8001674 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1f3      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1c7      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4937      	ldr	r1, [pc, #220]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e03a      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fc6f 	bl	8001674 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc6b 	bl	8001674 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1a8      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4925      	ldr	r1, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc4e 	bl	8001674 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc4a 	bl	8001674 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e187      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d036      	beq.n	8001e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff fc2e 	bl	8001674 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fc2a 	bl	8001674 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e167      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x200>
 8001e3a:	e01b      	b.n	8001e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fc17 	bl	8001674 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	e00e      	b.n	8001e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fc13 	bl	8001674 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d907      	bls.n	8001e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e150      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000
 8001e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ea      	bne.n	8001e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8097 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b77      	ldr	r3, [pc, #476]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b74      	ldr	r3, [pc, #464]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a73      	ldr	r2, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fbd3 	bl	8001674 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff fbcf 	bl	8001674 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e10c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2ea>
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x30c>
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5e      	ldr	r2, [pc, #376]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fb94 	bl	8001674 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fb90 	bl	8001674 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0cb      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ee      	beq.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fb7e 	bl	8001674 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fb7a 	bl	8001674 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0b5      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a1 	beq.w	80020fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d05c      	beq.n	8002080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d141      	bne.n	8002052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb4e 	bl	8001674 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fb4a 	bl	8001674 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e087      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	3b01      	subs	r3, #1
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	491b      	ldr	r1, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fb23 	bl	8001674 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fb1f 	bl	8001674 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e05c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x416>
 8002050:	e054      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fb0c 	bl	8001674 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fb08 	bl	8001674 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e045      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e038      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000
 8002094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4ec>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d028      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d11a      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fa3a 	bl	8001674 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fa36 	bl	8001674 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f99a 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08003758 	.word	0x08003758
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b090      	sub	sp, #64	; 0x40
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
 80022e4:	2300      	movs	r3, #0
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d00d      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x40>
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	f200 80a1 	bhi.w	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 8002306:	2b04      	cmp	r3, #4
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x3a>
 800230a:	e09b      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_GetSysClockFreq+0x184>)
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002310:	e09b      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002312:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_GetSysClockFreq+0x188>)
 8002314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002316:	e098      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002322:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d028      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	2200      	movs	r2, #0
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	627a      	str	r2, [r7, #36]	; 0x24
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002340:	2100      	movs	r1, #0
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_GetSysClockFreq+0x188>)
 8002344:	fb03 f201 	mul.w	r2, r3, r1
 8002348:	2300      	movs	r3, #0
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	4413      	add	r3, r2
 8002350:	4a43      	ldr	r2, [pc, #268]	; (8002460 <HAL_RCC_GetSysClockFreq+0x188>)
 8002352:	fba0 1202 	umull	r1, r2, r0, r2
 8002356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002358:	460a      	mov	r2, r1
 800235a:	62ba      	str	r2, [r7, #40]	; 0x28
 800235c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235e:	4413      	add	r3, r2
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	2200      	movs	r2, #0
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	61fa      	str	r2, [r7, #28]
 800236a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002372:	f7fd ff29 	bl	80001c8 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4613      	mov	r3, r2
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237e:	e053      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	2200      	movs	r2, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	617a      	str	r2, [r7, #20]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002392:	f04f 0b00 	mov.w	fp, #0
 8002396:	4652      	mov	r2, sl
 8002398:	465b      	mov	r3, fp
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	ebb2 080a 	subs.w	r8, r2, sl
 80023b2:	eb63 090b 	sbc.w	r9, r3, fp
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ca:	ebb2 0408 	subs.w	r4, r2, r8
 80023ce:	eb63 0509 	sbc.w	r5, r3, r9
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	00eb      	lsls	r3, r5, #3
 80023dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e0:	00e2      	lsls	r2, r4, #3
 80023e2:	4614      	mov	r4, r2
 80023e4:	461d      	mov	r5, r3
 80023e6:	eb14 030a 	adds.w	r3, r4, sl
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	eb45 030b 	adc.w	r3, r5, fp
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023fe:	4629      	mov	r1, r5
 8002400:	028b      	lsls	r3, r1, #10
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002408:	4621      	mov	r1, r4
 800240a:	028a      	lsls	r2, r1, #10
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	2200      	movs	r2, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	60fa      	str	r2, [r7, #12]
 8002418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241c:	f7fd fed4 	bl	80001c8 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4613      	mov	r3, r2
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_GetSysClockFreq+0x180>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetSysClockFreq+0x184>)
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800244c:	4618      	mov	r0, r3
 800244e:	3740      	adds	r7, #64	; 0x40
 8002450:	46bd      	mov	sp, r7
 8002452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	017d7840 	.word	0x017d7840

08002464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e041      	b.n	80024fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe ff80 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f000 fd2e 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e04e      	b.n	80025ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002546:	d01d      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_TIM_Base_Start_IT+0xc8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x80>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d010      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	e007      	b.n	80025b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40010400 	.word	0x40010400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40001800 	.word	0x40001800

080025e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e041      	b.n	800267a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f839 	bl	8002682 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 fc6e 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e041      	b.n	800272c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f839 	bl	8002734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fc15 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_TIM_PWM_Start+0x24>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e022      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d109      	bne.n	8002786 <HAL_TIM_PWM_Start+0x3e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e015      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d109      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x58>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e008      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07c      	b.n	80028b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	e013      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Start+0x92>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d8:	e00b      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d104      	bne.n	80027ea <HAL_TIM_PWM_Start+0xa2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e8:	e003      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fe6c 	bl	80034d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2d      	ldr	r2, [pc, #180]	; (80028bc <HAL_TIM_PWM_Start+0x174>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_PWM_Start+0xcc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <HAL_TIM_PWM_Start+0x178>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_TIM_PWM_Start+0xd0>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_TIM_PWM_Start+0xd2>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_TIM_PWM_Start+0x174>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d022      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d01d      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_TIM_PWM_Start+0x17c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_TIM_PWM_Start+0x180>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_TIM_PWM_Start+0x184>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_TIM_PWM_Start+0x178>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_TIM_PWM_Start+0x188>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_TIM_PWM_Start+0x18c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d111      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d010      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	e007      	b.n	80028b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010400 	.word	0x40010400
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40014000 	.word	0x40014000
 80028d4:	40001800 	.word	0x40001800

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fad3 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fac5 	bl	8002eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fad6 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 faa9 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa9b 	bl	8002eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 faac 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa7f 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa71 	bl	8002eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa82 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa55 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa47 	bl	8002eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fa58 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f9ca 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fe26 	bl	80036d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa1d 	bl	8002eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0220 	mvn.w	r2, #32
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fdf0 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e048      	b.n	8002b98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d839      	bhi.n	8002b88 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002b89 	.word	0x08002b89
 8002b24:	08002b89 	.word	0x08002b89
 8002b28:	08002b89 	.word	0x08002b89
 8002b2c:	08002b5f 	.word	0x08002b5f
 8002b30:	08002b89 	.word	0x08002b89
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b6d 	.word	0x08002b6d
 8002b40:	08002b89 	.word	0x08002b89
 8002b44:	08002b89 	.word	0x08002b89
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b7b 	.word	0x08002b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fa74 	bl	8003044 <TIM_OC1_SetConfig>
      break;
 8002b5c:	e017      	b.n	8002b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fadd 	bl	8003124 <TIM_OC2_SetConfig>
      break;
 8002b6a:	e010      	b.n	8002b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fb4c 	bl	8003210 <TIM_OC3_SetConfig>
      break;
 8002b78:	e009      	b.n	8002b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fbb9 	bl	80032f8 <TIM_OC4_SetConfig>
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e0ae      	b.n	8002d1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	f200 809f 	bhi.w	8002d0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002d0d 	.word	0x08002d0d
 8002bdc:	08002d0d 	.word	0x08002d0d
 8002be0:	08002d0d 	.word	0x08002d0d
 8002be4:	08002c49 	.word	0x08002c49
 8002be8:	08002d0d 	.word	0x08002d0d
 8002bec:	08002d0d 	.word	0x08002d0d
 8002bf0:	08002d0d 	.word	0x08002d0d
 8002bf4:	08002c8b 	.word	0x08002c8b
 8002bf8:	08002d0d 	.word	0x08002d0d
 8002bfc:	08002d0d 	.word	0x08002d0d
 8002c00:	08002d0d 	.word	0x08002d0d
 8002c04:	08002ccb 	.word	0x08002ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fa18 	bl	8003044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6999      	ldr	r1, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	619a      	str	r2, [r3, #24]
      break;
 8002c46:	e064      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fa68 	bl	8003124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6999      	ldr	r1, [r3, #24]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      break;
 8002c88:	e043      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fabd 	bl	8003210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0208 	orr.w	r2, r2, #8
 8002ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0204 	bic.w	r2, r2, #4
 8002cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]
      break;
 8002cc8:	e023      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fb11 	bl	80032f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69d9      	ldr	r1, [r3, #28]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	021a      	lsls	r2, r3, #8
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_ConfigClockSource+0x1c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0b4      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x186>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d03e      	beq.n	8002df8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7e:	f200 8087 	bhi.w	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	f000 8086 	beq.w	8002e96 <HAL_TIM_ConfigClockSource+0x172>
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	d87f      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d01a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xa6>
 8002d94:	2b70      	cmp	r3, #112	; 0x70
 8002d96:	d87b      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b60      	cmp	r3, #96	; 0x60
 8002d9a:	d050      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x11a>
 8002d9c:	2b60      	cmp	r3, #96	; 0x60
 8002d9e:	d877      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d03c      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0xfa>
 8002da4:	2b50      	cmp	r3, #80	; 0x50
 8002da6:	d873      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d058      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x13a>
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d86f      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d064      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	2b30      	cmp	r3, #48	; 0x30
 8002db6:	d86b      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d060      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x15a>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d867      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05c      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d05a      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	e062      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f000 fb5d 	bl	8003498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	609a      	str	r2, [r3, #8]
      break;
 8002df6:	e04f      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f000 fb46 	bl	8003498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1a:	609a      	str	r2, [r3, #8]
      break;
 8002e1c:	e03c      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 faba 	bl	80033a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2150      	movs	r1, #80	; 0x50
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fb13 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e02c      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f000 fad9 	bl	8003402 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2160      	movs	r1, #96	; 0x60
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fb03 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8002e5c:	e01c      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 fa9a 	bl	80033a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2140      	movs	r1, #64	; 0x40
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 faf3 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e00c      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4619      	mov	r1, r3
 8002e88:	4610      	mov	r0, r2
 8002e8a:	f000 faea 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e000      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3d      	ldr	r2, [pc, #244]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d027      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d023      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d017      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <TIM_Base_SetConfig+0x128>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <TIM_Base_SetConfig+0x130>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <TIM_Base_SetConfig+0x134>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <TIM_Base_SetConfig+0x138>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800
 8003038:	40001800 	.word	0x40001800
 800303c:	40001c00 	.word	0x40001c00
 8003040:	40002000 	.word	0x40002000

08003044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0201 	bic.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 0302 	bic.w	r3, r3, #2
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <TIM_OC1_SetConfig+0xd8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_OC1_SetConfig+0x64>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <TIM_OC1_SetConfig+0xdc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10c      	bne.n	80030c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0308 	bic.w	r3, r3, #8
 80030ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <TIM_OC1_SetConfig+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_OC1_SetConfig+0x8e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <TIM_OC1_SetConfig+0xdc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d111      	bne.n	80030f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40010000 	.word	0x40010000
 8003120:	40010400 	.word	0x40010400

08003124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0320 	bic.w	r3, r3, #32
 800316e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <TIM_OC2_SetConfig+0xe4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC2_SetConfig+0x68>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10d      	bne.n	80031a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a17      	ldr	r2, [pc, #92]	; (8003208 <TIM_OC2_SetConfig+0xe4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_OC2_SetConfig+0x94>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40010400 	.word	0x40010400

08003210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <TIM_OC3_SetConfig+0xe0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_OC3_SetConfig+0x66>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <TIM_OC3_SetConfig+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10d      	bne.n	8003292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <TIM_OC3_SetConfig+0xe0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_OC3_SetConfig+0x92>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <TIM_OC3_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	621a      	str	r2, [r3, #32]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010400 	.word	0x40010400

080032f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <TIM_OC4_SetConfig+0xa4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC4_SetConfig+0x68>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <TIM_OC4_SetConfig+0xa8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d109      	bne.n	8003374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400

080033a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 030a 	bic.w	r3, r3, #10
 80033e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003402:	b480      	push	{r7}
 8003404:	b087      	sub	sp, #28
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0210 	bic.w	r2, r3, #16
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800342c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	f043 0307 	orr.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2201      	movs	r2, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e05a      	b.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d01d      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d018      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a18      	ldr	r2, [pc, #96]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10c      	bne.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40010400 	.word	0x40010400
 8003614:	40014000 	.word	0x40014000
 8003618:	40001800 	.word	0x40001800

0800361c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e03d      	b.n	80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4d0d      	ldr	r5, [pc, #52]	; (8003720 <__libc_init_array+0x38>)
 80036ec:	4c0d      	ldr	r4, [pc, #52]	; (8003724 <__libc_init_array+0x3c>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	2600      	movs	r6, #0
 80036f4:	42a6      	cmp	r6, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	4d0b      	ldr	r5, [pc, #44]	; (8003728 <__libc_init_array+0x40>)
 80036fa:	4c0c      	ldr	r4, [pc, #48]	; (800372c <__libc_init_array+0x44>)
 80036fc:	f000 f820 	bl	8003740 <_init>
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	2600      	movs	r6, #0
 8003706:	42a6      	cmp	r6, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003710:	4798      	blx	r3
 8003712:	3601      	adds	r6, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	f855 3b04 	ldr.w	r3, [r5], #4
 800371a:	4798      	blx	r3
 800371c:	3601      	adds	r6, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	08003770 	.word	0x08003770
 8003724:	08003770 	.word	0x08003770
 8003728:	08003770 	.word	0x08003770
 800372c:	08003774 	.word	0x08003774

08003730 <memset>:
 8003730:	4402      	add	r2, r0
 8003732:	4603      	mov	r3, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	d100      	bne.n	800373a <memset+0xa>
 8003738:	4770      	bx	lr
 800373a:	f803 1b01 	strb.w	r1, [r3], #1
 800373e:	e7f9      	b.n	8003734 <memset+0x4>

08003740 <_init>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr

0800374c <_fini>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr
